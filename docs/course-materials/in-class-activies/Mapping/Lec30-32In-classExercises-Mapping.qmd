---
title: "In-class Exercises: Mapping"
output:
  html_document
---

```{r, message=FALSE, warning=FALSE, echo=FALSE}
# Set R chunk default options:
# -do not output all R messages in html report
# -do not output all R warnings in html report
# -set default figure widths and heights for all code blocks, unless you 
#  override them
knitr::opts_chunk$set(
  message = FALSE, warning = FALSE, fig.width = 16/2, fig.height = 9/2
)
```

```{r, echo=FALSE}
# Load all packages here. It's good practice to load all packages at the
# beginning of a qmd file so that collaborators can see in one shot all packages
# they'll need installed:
library(tidyverse)
library(fivethirtyeight)
library(leaflet)
library(sf)
library(maps)

# USA specific data
#library(USAboundaries)
library(tidycensus)
library(tmaptools)
library(macleish)
```

# Tip {-}

Do not run entire code blocks at once, as you'll skip over a lot of very important details. Rather, I recommend you highlight small segments of code and run them individually using:

* macOS: Command + Enter
* Windows: Control + Enter

# 1. Converting data frames to sf objects

```{r}
# Convert pres_2016_trail data frame to sf object using st_as_sf() from sf
# package. Note we set the coordinate reference system to WGS84
# https://spatialreference.org/ref/epsg/wgs-84/
pres_2016_trail_sf <- pres_2016_trail |>
  st_as_sf(coords = c("lng", "lat"), crs = 4326)
pres_2016_trail_sf

# Load maps package map object of US states and plot using default R plot
# function (not ggplot2). Plot is not pretty!
USA_map <-  maps::map("state", plot = FALSE, fill = TRUE)
plot(USA_map)

# Convert maps package map object to sf object using st_as_sf() again:
USA_sf <- USA_map |> 
  st_as_sf(coords = c("x", "y"), crs = 4326)

# Plot both layers:
ggplot() +
  geom_sf(data = USA_sf) +
  geom_sf(data = pres_2016_trail_sf, aes(color = candidate), size = 2) +
  facet_wrap(~candidate)
```

## Exercise

Draw a map of the US with the 2 universities I've worked at marked:

```{r}
# You can also get longitude and latitude for places ? By tapping into
# the OpenStreetMap (OSM) database using the geocode_OSM() function from the
# tmaptools package. Be careful though, apparently you are limited to 2000
# queries a day.

ne_colleges<- tibble(
  address=c("Smith College", "2 Tyler Ct, Northampton, MA 01060", "Holyoke Community College")) |>
  geocode(address, method = "osm") |>
  mutate(
    name = c("Smith College","McConnell Hall","Holyoke Community College")
)
```

Draw a map of only Massachusetts with some notable cities marked: Boston, Northampton, Easthampton, etc.. This will require you to manually create a data frame like `ne_colleges` above. 

```{r}
# Load the county data here. 
ma_counties <- map_data("county", "massachusetts") %>% 
  select( long, lat, group, id = subregion)
```

```{r}
# Write your code below

```

# 2. Loading shapefiles into R

Let's update our MA county files with updated US census data:

```{r}
download.file("https://www2.census.gov/geo/tiger/GENZ2022/shp/cb_2022_us_county_5m.zip", destfile = "county.zip")
unzip("county.zip", exdir = "county")
rm("county.zip")
us_geo<-read_sf("county") |>
  st_transform('+proj=longlat +datum=WGS84')


# filter us_geo to just MA
MA_counties<- us_geo|>
  filter(STUSPS  == "MA")

```

Let's load a shapefile of all bike trails in Massachusetts as provided by
[MassGIS (Bureau of Geographic Information)](https://www.mass.gov/info-details/massgis-data-bicycle-trails)

```{r}
# Load the "shapefile" contained in the biketrails_arc/ folder and load
# it into R using the sf package's read_sf() function.
bike_trails <- read_sf("biketrails_arc/") |>
  st_transform(crs = 4326)

# Plot this data!
ggplot() +
  geom_sf(data = bike_trails, color = "red")

# The above map lacks context however. Where are these bikepaths?
# Let's obtain a map of Massachusetts counties from the USAboundaries package

bike_trails <- read_sf("biketrails_arc/") |>
  st_transform(crs = 4326)


# Convert maps package map object to sf object using st_as_sf() again:

# Plot this data!
ggplot() +
  geom_sf(data = MA_counties)

# Plot both maps by adding both layers!
ggplot() +
  geom_sf(data = bike_trails, color = "red") +
  geom_sf(data= MA_counties,fill = "white", colour = "grey50")
  

# Where did our bike paths go? The order you plot in matters! Switch the two
# geom_sf()
ggplot() +
  geom_sf(data= MA_counties,fill = "white", colour = "grey50") +
  geom_sf(data = bike_trails, color = "red")

#This is okay, but I want to use geom_sf() instead of geom_polygon()

#We can do this if we get offical data like we did in class. Enter the location of your shape file. 

# Better! But what are these counties? Let's mark each counties' centroid
MA_counties <- MA_counties |>
  # Add centroids to each region using purrr package (covered in SDS 270 I believe)
  mutate(
    lng = purrr::map_dbl(geometry, ~st_centroid(.x)[[1]]),
    lat = purrr::map_dbl(geometry, ~st_centroid(.x)[[2]])
    )
MA_counties



# Plot! Notice how we define data = in the geom_point() instead of the ggplot().
# This sets the data set only for the geom_point() and not the other geoms.
# Any data = defined in the global ggplot() trickles down by default to the other
# geoms.
ggplot() +
  geom_sf(data = MA_counties, size = 0.5) +
  geom_sf(data = bike_trails, color = "red") +
  geom_point(data = MA_counties, aes(x = lng, y = lat)) 

# Can we do better? Yes! Use geom_text() instead with the label aesthetic!
ggplot() +
  geom_sf(data = MA_counties, size = 0.5) +
  geom_sf(data = bike_trails, color = "red") +
  geom_text(data = MA_counties, aes(x = lng, y = lat, label = NAME)) 
```

## Exercise

Create a map of Washington state showing all 39 counties using the `WA_counties` shapefile data with Seattle, Olympia, and Spokane marked with a dot. Use a **relative** filepath and not an **absolute** filepath to load the `WA_counties` shapefile.

> Hint: You need to set `crs` when loading the `WA_counties` shapefile data

```{r}
# Write your code below

```


We'll save this for Friday's class. 

# 3. Interactive maps using leaflet

Draw an interative map of a previous school or place you went. 

```{r}
# Interactive map example:
leaflet() |>
  addTiles() |> 
  addMarkers(lng = -72.64039, 
             lat = 42.31622,
             popup = "Smith College")
```

```{r}
# Plot sf objects in leaflet:
leaflet() |>
  addTiles() |>
  addPolygons(data = MA_counties)

st_crs(MA_counties)
```

## Exercise

Draw an interactive map of a previous school or place you went.

```{r}
# Write your code below

```

## Color in leaflet

```{r}
wetlands <- macleish_layers |>
  pluck("wetlands")

leaflet() |>
  addTiles()|>
  addPolygons(data = wetlands, 
              color = ~SHAPE_LEN, 
              popup = ~IT_VALDESC)

wetland_pal <- colorNumeric(
  palette = "viridis", 
  domain = wetlands |>
    pull(SHAPE_LEN)
)

leaflet() |>
  addTiles() |>
  addPolygons(data = wetlands, 
              color = ~wetland_pal(SHAPE_LEN), 
              fillOpacity = 0.8, weight = 0.1, 
              popup = ~IT_VALDESC) |>
  addLegend(position = "bottomleft", 
            pal = wetland_pal, 
            values = wetlands$SHAPE_LEN,
            title = "Wetland Area")
```

## Exercise

Draw an interactive map adding circles.

```{r}
# Write your code below

```

# 4. Choropleth maps using census data

```{r}
# Get MA county sf object, that includes population estimate column in data
mass_pop_orig <- 
  tidycensus::get_acs(
    geography = "county", 
    variables = "B01003_001", 
    state = "MA",
    geometry = TRUE
  ) |> 
  # Add centroids to each region using purrr package
  mutate(
    lng = purrr::map_dbl(geometry, ~st_centroid(.x)[[1]]),
    lat = purrr::map_dbl(geometry, ~st_centroid(.x)[[2]])
  )  
mass_pop_orig

# Unfortunately the original NAME variable above is very long and redundant.
# Create a new data frame with the just the county name using the separate()
# function from the tidyr package. 
mass_pop <- mass_pop_orig |> 
  tidyr::separate(NAME, c("County", "State"), sep = ", ") |> 
  tidyr::separate(County, c("County", "Fluff"), sep = " ") 

# Plot gradient choropleth map based on numerical variable estimate
ggplot() +
  geom_sf(data = mass_pop, aes(fill = estimate)) +
  geom_text(data = mass_pop, aes(x = lng, y = lat, label = County)) +
  labs(fill = "Population\nEstimate")

# What if instead we want a bin based choropleth map. Use the cut_number()
# function to convert the numerical variable estimate 
# to a categorical variable with 3 levels!
mass_pop <- mass_pop |>
  mutate(estimate_discrete = cut_number(estimate, 3))
mass_pop

# Plot!
ggplot() +
  geom_sf(data = mass_pop, aes(fill = estimate_discrete)) +
  geom_text(data = mass_pop, aes(x = lng, y = lat, label = County)) +
  labs(fill = "Population\nEstimate")
```

## Exercise

Use the `tidycensus` package to conduct a spatial analysis of the Census data it contains for Massachusetts.

[Instructions for using the tidycensus package](https://walker-data.com/tidycensus/articles/basic-usage.html)

```{r}
# Write your code below

```

## Challenge!!

1. Use the above data to create an interactive map
2. Convert the numerical variable estimate to a categorical variable with 3 levels such as Low, Medium, High
3. Use the `factor()` function to order 3 levels as Low, Medium, High, otherwise the legend order will be in alphabetical order
4. Create your own color palette to match the color order (e.g., from light green to dark green) with your legend order

```{r}
# Write your code below

```
