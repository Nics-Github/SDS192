
---
title: "Lec 21: In-class Exercise: Iteration"
output:
  html_document
---

Below there are three problems that use `map()` and `across()` to iterate. Problem 1 is from chapter 7 in the text. Problem 2 is an edited version from the example in chapter 7.5. And problem 3 I made up.  

Problem 1

I'm curious to learn about the link between particular drug use and other variables. `HELPrct` has data on this topic.

Can you use across to find the averages of only the numeric columns? NAs will give you grief and should be removed. The `where()` adverb will help you as will the `is.numeric` function. 

```{r}
library(mosaicData)
library(tidyverse)

HELPrct |>
  select(_____(______)) |>
  summarise(
    across(.cols = ______,
           .fns = ~ mean( . ,na.rm = TRUE))
          )
# Note the ~ above. It tells across() that we are using mean() as a function with arguments as opposed to mean without inputs. 
# The . is a placeholder that tells the mean() function to look at the last data frame before summarise(). 

```

Problem 2

For this problem we'll make a function then use it to make different plots of several variables at once. Use the code below to start. Do you notice anything in the graphs. 



```{r}
#| eval: FALSE

#1. Make a function that creates `geom_jitter` plots of `HELPrct` Data. Let your x = substance. 

HELPrct_scatter <- function(data, y_var){
  ____ |>
    ggplot(mapping = aes(x = ______))+
    # The code below lets ggplot() know were are inputting strings for the y_var 
    # so it can find them in the data.
    aes_string(y = ____) + 
    
    ____
    labs(title = paste(y_var, "by substance"))
}

#2. Make a vector of the following variables to map over: 

# "age","daysanysub", "e2b", "i1", "i2", "pss_fr","g1b"

HELP_variables <- c() 

#3. Map over the vector with your HELPrct_scatter function.

map(
    .x = ___,
    .f = ___,
    data = HELPrct
  ) |>
  patchwork::wrap_plots(ncol = 2)



```

Problem 3:

Create a function that finds the total, average, and maximum of a variable. Use that function to iterate over hospitalizations, mcs, and pcs. Then use map_dfr save the output as a data frame with rows. 

```{r}

data_summary <- function( variable){
  HELPrct|>
    summarise(___) 

}


HELPrct |>
  select()|>
  map_dfr(
      .f = 
    )

```

