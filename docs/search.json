[
  {
    "objectID": "course-materials/lectures/Brief R history.html",
    "href": "course-materials/lectures/Brief R history.html",
    "title": "History of R",
    "section": "",
    "text": "A simple history of R.\nSee this site for a longer history with fewer pictures.\n\n\nBefore R there was S\n“S is a language that was developed by John Chambers and others at the old Bell Telephone Laboratories”\n\n\n\nJohn Chambers at Stanford\n\n\n\n\nS got bought and sold\nHere’s a book on S\n\n\n\n\n\n\n\n1996-2000 R is release for free\nRoss Ihaka and Robert Gentleman of the university of Auckland Developed it.\n\n\nRoss Ihaka\n\nPhoto by Kristina D.C. Hoeppner from Wellington, New Zealand - Ross Ihaka, CC BY-SA 2.0, https://commons.wikimedia.org/w/index.php?curid=37005667\n\n\nRobert Gentleman\n\n\n\nRobert Gentleman\n\n\nPhoto by Aneesulrehman - Own work, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=89993843\n\n\nWhy is it called R?\n\n\nCRAN\nComprehensive R Archive Network\nThey manage all R updates and R packages. There are currently 19897 packages.\nThey put on the UseR! conference\nThere’s an R magazine\nThis is the CRAN team\n\n\nWho made the tidyverse\n\n\n\n\n\nPhoto by By Hadley Wickham - Private correspondence, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=46810731\n\n\nWho makes RStudio?\n\n\nStarted in 2009 as RStudio\nThe tidyverse comes out in 2016\nRenamed Posit last year.\nOffers Python Support\n\n\n\n\nThings lots of people know about R\nDefault Colors palmerpenguins mtcars"
  },
  {
    "objectID": "index.html#colors",
    "href": "index.html#colors",
    "title": "SDS 192: Intro to Data Science",
    "section": "Colors",
    "text": "Colors\n\nlive_demo\nColor Brewer site\nProf. Cao’s Lecture on Frequency Plots and Facets\nIn class exercise"
  },
  {
    "objectID": "index.html#the-c-function-typing-math-and-tibbles",
    "href": "index.html#the-c-function-typing-math-and-tibbles",
    "title": "SDS 192: Intro to Data Science",
    "section": "The c() function, typing math, and tibbles",
    "text": "The c() function, typing math, and tibbles"
  },
  {
    "objectID": "index.html#history-of-r",
    "href": "index.html#history-of-r",
    "title": "SDS 192: Intro to Data Science",
    "section": "History of R",
    "text": "History of R"
  },
  {
    "objectID": "index.html#other-things",
    "href": "index.html#other-things",
    "title": "SDS 192: Intro to Data Science",
    "section": "Other things",
    "text": "Other things\n\n\n\n\n\n\nTo activate colors\n\n\n\n\n\nSome students are not getting “red” to be red. Try this: Tools menu &gt; global options &gt; code &gt; display &gt; “enable preview of named and hex colors\nIf that doesn’t work, maybe its a bug?\n\n\n\n\nthe c() function\ntyping math\nand tibbles\nggplot cheatsheet\nThe visual editor\nShort History of R"
  },
  {
    "objectID": "Resources.html#moderndive",
    "href": "Resources.html#moderndive",
    "title": "Resources",
    "section": "ModernDive",
    "text": "ModernDive"
  },
  {
    "objectID": "Resources.html#data-science-in-a-box",
    "href": "Resources.html#data-science-in-a-box",
    "title": "Resources",
    "section": "Data Science in a box",
    "text": "Data Science in a box"
  },
  {
    "objectID": "Resources.html#data-visualization-ggplot2",
    "href": "Resources.html#data-visualization-ggplot2",
    "title": "Resources",
    "section": "Data Visualization: ggplot2",
    "text": "Data Visualization: ggplot2"
  },
  {
    "objectID": "Resources.html#data-transformation-dplyr",
    "href": "Resources.html#data-transformation-dplyr",
    "title": "Resources",
    "section": "Data transformation: dplyr",
    "text": "Data transformation: dplyr"
  },
  {
    "objectID": "Resources.html#data-import-tidyr",
    "href": "Resources.html#data-import-tidyr",
    "title": "Resources",
    "section": "Data Import: tidyr",
    "text": "Data Import: tidyr"
  },
  {
    "objectID": "Resources.html#rmarkdown-cheat-sheet",
    "href": "Resources.html#rmarkdown-cheat-sheet",
    "title": "Resources",
    "section": "RMarkdown Cheat sheet",
    "text": "RMarkdown Cheat sheet"
  },
  {
    "objectID": "Resources.html#style-guide",
    "href": "Resources.html#style-guide",
    "title": "Resources",
    "section": "Style Guide",
    "text": "Style Guide\nThe Tidyverse Style Guide"
  },
  {
    "objectID": "index.html#descriptive-stats-and-boxplots",
    "href": "index.html#descriptive-stats-and-boxplots",
    "title": "SDS 192: Intro to Data Science",
    "section": "Descriptive stats and boxplots",
    "text": "Descriptive stats and boxplots\n\nMDSR Chapter 3.5 problem 3 and 7\nHints: - you might need to install mosaicdata\n\nlook for the correct graph for 7c on the cheat sheet"
  },
  {
    "objectID": "index.html#lecture-descriptive-stats-and-boxplots",
    "href": "index.html#lecture-descriptive-stats-and-boxplots",
    "title": "SDS 192: Intro to Data Science",
    "section": "Lecture: Descriptive stats and boxplots",
    "text": "Lecture: Descriptive stats and boxplots\n\nClasswork: MDSR Chapter 3.5 problem 3 and 7\nHints:\n\nyou might need to install mosaicdata\nlook for the correct graph for 7c on the cheat sheet"
  },
  {
    "objectID": "course-materials/lectures/Making-data-frames.html",
    "href": "course-materials/lectures/Making-data-frames.html",
    "title": "Making Data Frames",
    "section": "",
    "text": "Weather\n\n\n\nVectors\nMake three vectors with the day of the month, the weather and temperature.\n\nday &lt;- c(9, 10,11,12,13,14,15)\nweather &lt;- c()\ntemperature &lt;- c()\n\n\n\nUniqueness\n\nunique()\nunique(weather)\n\n\n\nMake a dataframe\n\nWeek_in_sept &lt;- data.frame(day,weather,temperature)\n\n\n\nLet’s take a look\n\nWeek_in_sept\n\n\nglimpse(Week_in_sept)\nhead(): returns first 6 rows\ntails(): returns last 6 rows\nnames(): returns the coloumn names\nnrow(): returns the number of rows\nncol(): returns the number of columns\n\n\n\nRenaming columns\nSave the new column names as a vector and use the names() function.\nWeekdays &lt;- c(“Sunday”,“Monday”,“Tuesday”,“Wednesday”….)\nnames(Week_in_sept) &lt;- Weekdays\n\n\nColumns\nWe can use the $ to access columns as vectors Week_in_sept$Monday\nLet’s do table() on Monday\n\n\nA dataset\n\nColumns are variables\nRows are observations\nIndividual entries are called values\nThe data we will deal with in this course is rectangular.\n\n\nMetadata\nThis is the data about our data.\nSometimes a data dictionary comes with our data.\nWhen data comes in a package we can use the ? operator.\nMetadata deals with provenance.\nDescriptive Data deals with the contents of the data.\nLet’s consider ChickWeight and its metadata\n\n\nCredits\nWeather map- https://weather.com/forecast/news/2014-10-31-national-forecast-20141009\nData Frame Image- Grolemund, Garrett, and Hadley Wickham. n.d. R for Data Science. Accessed March 31, 2019. https://r4ds.had.co.nz/."
  },
  {
    "objectID": "course-materials/lectures/ethics.html#algorithms-reflect-the-bais-of-their-creator",
    "href": "course-materials/lectures/ethics.html#algorithms-reflect-the-bais-of-their-creator",
    "title": "Data Ethics",
    "section": "Algorithms Reflect the bais of their creator",
    "text": "Algorithms Reflect the bais of their creator\n\nA piece of data itself has no positive or negative moral value, but the way we manipulate it does. It’s hard to imagine a more contentious project than programing ethics into our algorithms; to do otherwise, however, and allow algorithms to monitor themselves, is to invite the quicksand of moral equivalence."
  },
  {
    "objectID": "course-materials/lectures/ethics.html#books",
    "href": "course-materials/lectures/ethics.html#books",
    "title": "Data Ethics",
    "section": "Books",
    "text": "Books"
  },
  {
    "objectID": "course-materials/lectures/ethics.html#last-slide",
    "href": "course-materials/lectures/ethics.html#last-slide",
    "title": "Data Ethics",
    "section": "Last Slide",
    "text": "Last Slide\n\nChistopher Wylie https://www.nytimes.com/2018/03/17/us/politics/cambridge-analytica-trump-campaign.html\nMichal Kosinski and Yilun Wang https://www.nytimes.com/2017/10/09/science/stanford-sexual-orientation-study.html\nNew Yorker https://www.newyorker.com/news/daily-comment/the-ai-gaydar-study-and-the-real-dangers-of-big-data"
  },
  {
    "objectID": "schwab.html",
    "href": "schwab.html",
    "title": "Nic Schwab",
    "section": "",
    "text": "Nicholas Schwab is a visiting lecture in Statistical and Data Sciences. He is a tenured professor at Holyoke Community College. When not teaching data science, he enjoys rock climbing, running, and reading childrens’ books to his kids."
  },
  {
    "objectID": "schwab.html#student-hours",
    "href": "schwab.html#student-hours",
    "title": "Nic Schwab",
    "section": "Student Hours",
    "text": "Student Hours\nDrop into the office: Wednesdays and Friday from 9:45am - 10:45am in McConnell 213\nBy Appointment (schedule between 12 hours and 7 days in advance) Tuesday and Thursday 9:00 – 10:15 am\nPlease let me know if the above times do not work for your schedule and we can coordinate another time."
  },
  {
    "objectID": "schwab.html#education",
    "href": "schwab.html#education",
    "title": "Nic Schwab",
    "section": "Education",
    "text": "Education\n\nMS in Data Science (~2026)\nUniversity of Texas at Austin\nAustin, Texas\nMA in Mathematics (2009)\nAppalchain State University\nBoone, NC\nBA in Mathematics (2007)\nUC Santa Cruz\nSanta Cruz, CA"
  },
  {
    "objectID": "schwab.html#experience",
    "href": "schwab.html#experience",
    "title": "Nic Schwab",
    "section": "Experience",
    "text": "Experience\n\nProfessor of Mathematics\nHolyoke Community College\nHolyoke, MA 2014–2023"
  },
  {
    "objectID": "course-materials/lectures/github_practice.html",
    "href": "course-materials/lectures/github_practice.html",
    "title": "Real Github Practice",
    "section": "",
    "text": "Pushing to Main\nWe’ve seen how messy this can get.\nYou can push to main when you are working alone (and always on one computer).\nDirected Acyclic Graph (DAG) picture.\n\nA node is a commit\nEdges point to the parent\n\n\n\nBranches\nWhen working with other people create branches.\nBranches allow you to work without mucking up other’s work.\nIf two people edit the same line of code at the same time and pushed to main?\nGithub doesn’t know which to take and you get a tricky merge conflict.\n\n\nStep 1: Create a fresh project 1 .rproj file.\nDon’t delete your .qmd if you’ve been working on it.\nWe’ll get to it later.\n\n\nStep 2: Create a new branch.\n\n\nGive it a good name. No spaces.\nYour partner should give a different branch name.\n\n\n\nStep 3: Change a small thing.\nWe will change the authors’ names in our project.\nWork out with your partner who is author 1 and 2 (and 3).\n\n\nStep 4: Save and commit.\nYour partners are doing the same thing.\nNote: When you commit your branch gets a new node.\nDirected Acyclic Graph (DAG) picture.\n\n\nStep 5: Pull then Push your branch to github.\nIn general it is a good idea to pull first to get any new changes before you push.\n\n\n\nStep 6: Go to github.\n\n\n\nYou should see something like this. Except with your branch name instead of practice.\n\n\n\n\nStep 7: Create a pull request for your branch\nYou are pulling your files to the main branch.\nBoth you and your partner will do this.\nHopefully you’ll be able to do an auto merge.\n\nGive your pull request a good message too.\n\n\nStep 8: Merge Branches\n\nDo this one at a time.\nYou can delete the old branch.\n\nYou’ll make a new one.\n\n\n\n\nStep 9: Switch back to main and pull\n\nCheck your files are updated with both names.\n\n\nMerge Conflict practice\n\n\nNew Branch - Good Name\nYou and your partner should change the title of your project.\n\nChoose different titles\n\nCommit and push to github.\nGo to github to fix the merge conflict.\nSometimes github will tell you go to the command line\n\nOpen the Terminal and type what it says.\n\n\n\n\n\nSometimes a file changes.\nhead &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nmake changes in your file and delete the excess.\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\nExplore\n\nhistory\nbranches\npull requests\n\n\n\nProject work\nMake a simple graph and push to github.\nAlways work in separate branches not on main."
  },
  {
    "objectID": "course-materials/lectures/ethics.html#credits",
    "href": "course-materials/lectures/ethics.html#credits",
    "title": "Data Ethics",
    "section": "Credits",
    "text": "Credits\n\nSome Content was taken from Ben Baumer’s Lecture on Ethics\nChistopher Wylie https://www.nytimes.com/2018/03/17/us/politics/cambridge-analytica-trump-campaign.html\nMichal Kosinski and Yilun Wang https://www.nytimes.com/2017/10/09/science/stanford-sexual-orientation-study.html\nNew Yorker https://www.newyorker.com/news/daily-comment/the-ai-gaydar-study-and-the-real-dangers-of-big-data"
  },
  {
    "objectID": "course-materials/lectures/Wrangling_1_SQF.html",
    "href": "course-materials/lectures/Wrangling_1_SQF.html",
    "title": "Presentation",
    "section": "",
    "text": "Stop, Question, Frisk\n\nNew York City Police Practice\nMany articles about the targeting of Black and Latio young men.\nStudies have shown that this has led to mistrust in the police.\n\n\n\nA bit about me\nI’m not Black.\nI’m am Hispanic.\nI am not from New York City.\n\n\n\n\n\nRace Exists\nLet’s acknowledge that Race exists and plays a part in the way human being interact with each other.\nWe might get a bit uncomfortable.\n\n\nSchedule:\n\n\nIntroduce you to the data.\nPose a question that I have about stop and frisk.\nGive you Data Frames with data to answer the question one way.\n\nYou’ll order them with a partner.\nYou’ll make up puesdo code to explain data transformations.\nI’ll give you the real code arrows.\n\nWe’ll repeat the process of data transformation with the real code.\nTime for questions.\n\n\n\n\nQuestions so far?\n\n\nThe Data\nHere’s NYC’s website with the stop and frisk data.\n\n\nEach column is a variable\nand each row is a stop\n\n\nData Dictionaries exist for older data.\nNew Data variables are more clear.\nThe variable names are inconsistent across years.\n\n\nA Question\n\nAre Black, Hispanic, groups more likely to be stopped by police officers than other groups in 2011? Does this change as the total counts of stops decreases to 2021 levels?\n\n\n\nMotivation for question\nThis Stop and Frisk policing strategy came into force under Michael Bloomberg governor from 2003 to 2013.\nDuring the end of Michael Bloomberg’s tenure as governor there was a public out cry of the ____ of this policy.\nThe policy’s discrimination leads to distrust in police.\n\n\nStops in a year\n\n# Read in each csv file. This is a lot \n\n# With purr csv\n\nfile_paths_csv <- fs::dir_ls(\"../data/2003_2015_csv_files\")\n\nfile_contents_csv<- file_paths_csv |>\n  map(function (path){\n    read_csv(path)\n  })\n\n# with purr excel\n\nfile_paths_xl <- fs::dir_ls(\"../data/2016_2022_xl_files\")\n\nfile_contents_xl<- file_paths_xl |>\n  map(function (path){\n    read_excel(path)\n  })\n\n# https://www.youtube.com/watch?v=An1bUIg-nVM\n\n#See the number of rows i.e stops in each year\npre_2016 <- sapply(file_contents_csv, nrow)\npost_2016 <- sapply(file_contents_xl, nrow)\n\n\nyears <- c(2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022 )\nstops_frisks <- c(160851, 313523, 398191, 506491, 472096, 540302, 581168,  601285, 685724, 532911,  191851, 45787, 22563, 12405, 11629,  11008,   13459,9544 , 8947,  15102)  \n\nsqf <- as.data.frame(years,stops_frisks)\n\nWarning in as.data.frame.numeric(years, stops_frisks): 'row.names' is not a\ncharacter vector of length 20 -- omitting it. Will be an error!\n\nsqf |> \n  ggplot(aes(years,stops_frisks)) +\n  geom_line()+\n  xlab(\"Year\")+\n  ylab(\"Citizens Stopped ('000s)\")+\n  labs(title=\"\")+\n  theme_minimal()+\n  scale_y_continuous(breaks = c(0,350000,700000), labels = c(\"0\",\"350\",\"700\"))+\n  scale_x_continuous(breaks = c(2003,2013,2022))\n\n\n\n\n\n\nLet’s take a look at the data frame together.\n\n\nHere are your data frames\nLittle envelopes Data 2021\nLittle envelopes Functions\n\n\nConclusions from 2021 data\n\n\nFor comparison:\nHere’s the demographics of NYC1:\n\nBlack: 23.4 %\nLatino: 28.9%\nWhite: 39.8%\n\n\n\nSummarize functions:\nNew functions:\nselect(), mutate(), arrange(), rename()\nOld funtions:\nnames(), recode(), count()\n\n\nLet’s compare to 2011.\nMake a new r project.\nDownload 2011 csv from this site. Extract it to the same folder as your rproj.\nMake a new document and put this in a chunk.\nread_csv(\"2011.csv\")\n\n\nAnswer the question.\n\nAre Black, Hispanic, groups more likely to be stopped by police officers than other groups in 2011? Does this change as the total counts of stops decreases to 2021 levels?\n\n\n\nWhat other questions do you have about the data?\n\n\n\n\n\nFootnotes\n\n\nhttps://www.census.gov/quickfacts/fact/table/newyorkcitynewyork/PST045222↩︎"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#dplyr-lives-in-the-tidyverse",
    "href": "course-materials/lectures/mdsr-the-verbs.html#dplyr-lives-in-the-tidyverse",
    "title": "The Verbs",
    "section": "dplyr lives in the tidyverse",
    "text": "dplyr lives in the tidyverse"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#dplyr-highlights",
    "href": "course-materials/lectures/mdsr-the-verbs.html#dplyr-highlights",
    "title": "The Verbs",
    "section": "dplyr highlights",
    "text": "dplyr highlights\n\n\nThe Five Verbs:\n\nselect()\nfilter()\nmutate()\narrange()\nsummarize()\n\n\nPlus:\n\ngroup_by()\nrename()\ninner_join()\nleft_join()\n\n\n\nRead more"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#philosophy",
    "href": "course-materials/lectures/mdsr-the-verbs.html#philosophy",
    "title": "The Verbs",
    "section": "Philosophy",
    "text": "Philosophy\n\nEach verb takes a data frame and returns a data frame\n\nactually a tbl_df (more on that later)\nallows chaining with %&gt;% or |&gt;\n\nIdea:\n\nmaster a few simple commands\nuse your creativity to combine them\n\nCheat Sheet:\n\nResources tab"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#what-is-a-tibble",
    "href": "course-materials/lectures/mdsr-the-verbs.html#what-is-a-tibble",
    "title": "The Verbs",
    "section": "What is a tibble?",
    "text": "What is a tibble?\n\n\n\n\n\nobject of class tbl\na re-imagining of a data.frame\nit looks and acts like a data.frame\nbut it’s even better…\ntidyverse works with tibbles\n\n\n\nfootnote"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#select-take-a-subset-of-the-columns",
    "href": "course-materials/lectures/mdsr-the-verbs.html#select-take-a-subset-of-the-columns",
    "title": "The Verbs",
    "section": "select(): take a subset of the columns",
    "text": "select(): take a subset of the columns"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#filter-take-a-subset-of-the-rows",
    "href": "course-materials/lectures/mdsr-the-verbs.html#filter-take-a-subset-of-the-rows",
    "title": "The Verbs",
    "section": "filter(): take a subset of the rows",
    "text": "filter(): take a subset of the rows"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#mutate-add-or-modify-a-column",
    "href": "course-materials/lectures/mdsr-the-verbs.html#mutate-add-or-modify-a-column",
    "title": "The Verbs",
    "section": "mutate(): add or modify a column",
    "text": "mutate(): add or modify a column"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#arrange-sort-the-rows",
    "href": "course-materials/lectures/mdsr-the-verbs.html#arrange-sort-the-rows",
    "title": "The Verbs",
    "section": "arrange(): sort the rows",
    "text": "arrange(): sort the rows"
  },
  {
    "objectID": "course-materials/lectures/mdsr-the-verbs.html#summarize-collapse-to-a-single-row",
    "href": "course-materials/lectures/mdsr-the-verbs.html#summarize-collapse-to-a-single-row",
    "title": "The Verbs",
    "section": "summarize(): collapse to a single row",
    "text": "summarize(): collapse to a single row"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html",
    "title": "Taxonomy of Graphics",
    "section": "",
    "text": "Use the vocabulary from the Taxonomy of data graphics.\n\n\nvisual cues\ncoordinate system\nscales\ncontext\nWhat is the graph showing?\nYour feelings"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#discuss-the-following",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#discuss-the-following",
    "title": "Taxonomy of Graphics",
    "section": "",
    "text": "Use the vocabulary from the Taxonomy of data graphics.\n\n\nvisual cues\ncoordinate system\nscales\ncontext\nWhat is the graph showing?\nYour feelings"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#ny-times-graphs",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#ny-times-graphs",
    "title": "Taxonomy of Graphics",
    "section": "NY Times Graphs:",
    "text": "NY Times Graphs:\n\nSerena Williams\nEndangered Biodiversity\nPandemic Stimulus"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#yougov",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#yougov",
    "title": "Taxonomy of Graphics",
    "section": "Yougov:",
    "text": "Yougov:\n\nIce Cream (Just the first graph, there is a lot here)."
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#from-five-thirty-eight",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#from-five-thirty-eight",
    "title": "Taxonomy of Graphics",
    "section": "From Five Thirty Eight:",
    "text": "From Five Thirty Eight:\nPresident Biden’s Approval Rating"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#plan-parenthood",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#plan-parenthood",
    "title": "Taxonomy of Graphics",
    "section": "Plan Parenthood:",
    "text": "Plan Parenthood:"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#corrected",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#corrected",
    "title": "Taxonomy of Graphics",
    "section": "Corrected",
    "text": "Corrected"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#corrected-again",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#corrected-again",
    "title": "Taxonomy of Graphics",
    "section": "Corrected again",
    "text": "Corrected again"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#fox-polling",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#fox-polling",
    "title": "Taxonomy of Graphics",
    "section": "Fox Polling",
    "text": "Fox Polling"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming",
    "title": "Taxonomy of Graphics",
    "section": "Global warming",
    "text": "Global warming"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming-2",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming-2",
    "title": "Taxonomy of Graphics",
    "section": "Global warming 2",
    "text": "Global warming 2"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming-3",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming-3",
    "title": "Taxonomy of Graphics",
    "section": "Global Warming 3",
    "text": "Global Warming 3"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming-4",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#global-warming-4",
    "title": "Taxonomy of Graphics",
    "section": "Global Warming 4",
    "text": "Global Warming 4\n ## Gun Deaths Florida"
  },
  {
    "objectID": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#citations",
    "href": "course-materials/in-class-activies/Activity_Taxonomy_of_Graphics.html#citations",
    "title": "Taxonomy of Graphics",
    "section": "Citations",
    "text": "Citations\nAll graph originated else where.\nBelow are secondary sources.\nMost the the graphs were grabed from: datapipeline\nThe last graph was grabbed from The Washington Post"
  },
  {
    "objectID": "course-materials/in-class-activies/Wrangling_Baby_Names.html",
    "href": "course-materials/in-class-activies/Wrangling_Baby_Names.html",
    "title": "Wrangle Babynamnes",
    "section": "",
    "text": "We will work with the five verbs to wrangle and graph babynames.\nYou should check out the dplyr cheatsheet.\nThere are three parts to today’s classwork.\n\nPart 1. make a narcissistic graph\nPart 2. 5 most popular names in the US since 1880\nPart 3. Do presidents’ names influence babies’ names?"
  },
  {
    "objectID": "course-materials/in-class-activies/Wrangling_Baby_Names.html#this-is-not-a-lab",
    "href": "course-materials/in-class-activies/Wrangling_Baby_Names.html#this-is-not-a-lab",
    "title": "Wrangle Babynamnes",
    "section": "",
    "text": "We will work with the five verbs to wrangle and graph babynames.\nYou should check out the dplyr cheatsheet.\nThere are three parts to today’s classwork.\n\nPart 1. make a narcissistic graph\nPart 2. 5 most popular names in the US since 1880\nPart 3. Do presidents’ names influence babies’ names?"
  },
  {
    "objectID": "course-materials/in-class-activies/Wrangling_Baby_Names.html#wrangle-your-name-out-of-babynames",
    "href": "course-materials/in-class-activies/Wrangling_Baby_Names.html#wrangle-your-name-out-of-babynames",
    "title": "Wrangle Babynamnes",
    "section": "1. Wrangle your name out of babynames",
    "text": "1. Wrangle your name out of babynames\nYou will want to filter() your name. I would make a vector of names c(“Nic”,“Nicholas”, “Nick”)\nConsider if you want both the sex= M and F."
  },
  {
    "objectID": "course-materials/in-class-activies/Wrangling_Baby_Names.html#create-a-line-graph",
    "href": "course-materials/in-class-activies/Wrangling_Baby_Names.html#create-a-line-graph",
    "title": "Wrangle Babynamnes",
    "section": "2. Create a line graph",
    "text": "2. Create a line graph\nShow the proportion of children with the same names as you over time."
  },
  {
    "objectID": "index.html#project-1",
    "href": "index.html#project-1",
    "title": "SDS 192: Intro to Data Science",
    "section": "Project 1",
    "text": "Project 1\nProject 1 Data Dictionary\nPolishing Figures\n\n\n\n\n\n\nworking directory\n\n\n\n\n\nYou may need to set your working directory.\nThe easiest way to do this is to find your Lec09-…zip in the file pane and go gear-icon &gt; “Set As Working Directory”"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SDS 192: Intro to Data Science",
    "section": "",
    "text": "Announcement: Presentation of the major"
  },
  {
    "objectID": "course-materials/lectures/Day18_pivots.html",
    "href": "course-materials/lectures/Day18_pivots.html",
    "title": "Tidydata and pivots",
    "section": "",
    "text": "Tidydata\n\n\n\nI have heard about\npivot_longer()\npivot_wider()\nWhat do these functions do?\n\n\n10 minutes for pivot_longer()\nThis data is not tidy how can we make it longer for computers?\n\n\n✔ Reading from \"indicator hiv estimated prevalence% 15-49\".\n\n\n✔ Range 'Data'.\n\n\n# A tibble: 3 × 5\n  Country        `1979` `1989` `1999` `2009`\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 France        NA          NA    0.3    0.4\n2 South Africa  NA          NA   14.8   17.2\n3 United States  0.0318     NA    0.5    0.6\n\n\nWrite down how you think we could do that with pivot_longer()\n\n\n10 minutes pivot_wider()\nThis data is tidy how could we make it wider for humans?\n\n\n`summarise()` has grouped output by 'name'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   name [3]\n  name   sex    total\n  &lt;chr&gt;  &lt;chr&gt;  &lt;int&gt;\n1 Leslie F     266474\n2 Leslie M     112689\n3 Robin  F     289395\n4 Robin  M      44616\n5 Sue    F     144465\n6 Sue    M        519\n\n\nWrite down how you think we could do that with pivot_wider()\n\n\nEnd of slides\n\n\nReally End of Slides\n\n\nJust kidding pivot_longer()\nLet’s try our code on the examples above. Pivot this longer.\n\nlibrary(tidyverse)\nlibrary(mdsr)\nlibrary(googlesheets4)\ngs4_deauth()\nhiv_key &lt;- \"1kWH_xdJDM4SMfT_Kzpkk-1yuxWChfurZuWYjfmv51EA\"\nhiv &lt;- read_sheet(hiv_key) |&gt;\n  rename(Country = 1) |&gt;\n  filter(\n    Country %in% c(\"United States\", \"France\", \"South Africa\")\n  ) |&gt;\n  select(Country, `1979`, `1989`, `1999`, `2009`) |&gt;\n  unnest(cols = c(`2009`)) |&gt;\n  mutate(across(matches(\"[0-9]\"), as.double))\n\n✔ Reading from \"indicator hiv estimated prevalence% 15-49\".\n\n\n✔ Range 'Data'.\n\nhiv\n\n# A tibble: 3 × 5\n  Country        `1979` `1989` `1999` `2009`\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 France        NA          NA    0.3    0.4\n2 South Africa  NA          NA   14.8   17.2\n3 United States  0.0318     NA    0.5    0.6\n\n\n\n\npivot_wider()\n\nlibrary(babynames)\nbabynames |&gt;\n     filter(name %in% c(\"Sue\", \"Robin\", \"Leslie\")) |&gt;\n     group_by(name, sex) |&gt;\n     summarize(total = sum(n))\n\n`summarise()` has grouped output by 'name'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 6 × 3\n# Groups:   name [3]\n  name   sex    total\n  &lt;chr&gt;  &lt;chr&gt;  &lt;int&gt;\n1 Leslie F     266474\n2 Leslie M     112689\n3 Robin  F     289395\n4 Robin  M      44616\n5 Sue    F     144465\n6 Sue    M        519\n\n\n\n\nFurther Reading\n[Futher reading on tidy data](https://r4ds.had.co.nz/tidy-data.html)\n[H]"
  },
  {
    "objectID": "course-materials/lectures/Day20_tidying.html",
    "href": "course-materials/lectures/Day20_tidying.html",
    "title": "Cleaning Data",
    "section": "",
    "text": "Data is Messy.\nWe have to clean other people’s data.\n\n\nLubridate\nCleans dates for us. cheat-sheet\nymd(),mdy()\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\n\nhead(lakers,3)\n\n      date opponent game_type  time period     etype team              player\n1 20081028      POR      home 12:00      1 jump ball  OFF                    \n2 20081028      POR      home 11:39      1      shot  LAL           Pau Gasol\n3 20081028      POR      home 11:37      1   rebound  LAL Vladimir Radmanovic\n  result points type  x  y\n1             0      NA NA\n2 missed      0 hook 23 13\n3             0  off NA NA\n\n\n\n\nlakers$date\n\ntypeof(lakers$date)\n\n[1] \"integer\"\n\n\n\n# Let's make this into a time object.\nlakers$date &lt;-ymd(lakers$date)\ntypeof(lakers$date)\n\n[1] \"double\""
  },
  {
    "objectID": "course-materials/in-class-activies/Lec17In-classExercise-JoinTables/Lec17In-classExercise-JoinTables.html",
    "href": "course-materials/in-class-activies/Lec17In-classExercise-JoinTables/Lec17In-classExercise-JoinTables.html",
    "title": "Lec 17: In-class Exercise: Join Two Tables",
    "section": "",
    "text": "The ct_school_attendance dataset documents school attendance in 2019-2020 and 2020-2021 by Connecticut school district. Certain rows documents attendance rates for “All students”, while others report the data for certain student groups including:\nStudents experiencing homelessness Students with disabilities Students who qualify for free/reduced lunch English learners All high needs students Non-high needs students Students by race/ethnicity (Hispanic/Latino of any race, Black or African American, White, All other races)\nFinally, there is a series of rows in the dataset that document attendance rates for all of Connecticut.\nTo standardize the observations under consideration, we will start by reading in the data and filtering to rows documenting attendance rates for all students and rows not documenting attendance rates for all of Connecticut.\n\nlibrary(tidyverse)\n\nct_school_attendance &lt;- read_csv(\"data/ct_school_attendance.csv\") |&gt;\n  filter(studentgroup == \"All Students\" & reportingdistrictname != \"Connecticut\") \n\nThe ct_school_learning_model dataset documents information about the percentage of students engaged in remote learning during each week of the year by Connecticut school district. We will only consider the remote learning percentages in the first week of most schools’ 2020-2021 school year: September 7, 2020 - September 11, 2020.\n\nct_school_learning_model &lt;-\n  read_csv(\"data/ct_school_learning_model.csv\")\n\n\nStep 1: Inner Join\n\nJoin ct_school_attendance by ct_school_learning_model with an inner join.\nselect() the district code, the district name, the 2020-2021 attendance rate, and the percent of students that are fully remote in the first week of the 2020-2021 school year.\n\n\n# Write your code below\nct_school_attendance |&gt;\ninner_join( ct_school_learning_model, by= c(\"reportingdistrictcode\"=\"district_code\") )\n\n# A tibble: 197 × 24\n   reportingdistrictcode reportingdistrictname       category studentgroup\n   &lt;chr&gt;                 &lt;chr&gt;                       &lt;chr&gt;    &lt;chr&gt;       \n 1 0010011               Andover School District     &lt;NA&gt;     All Students\n 2 0020011               Ansonia School District     &lt;NA&gt;     All Students\n 3 0030011               Ashford School District     &lt;NA&gt;     All Students\n 4 0040011               Avon School District        &lt;NA&gt;     All Students\n 5 0050011               Barkhamsted School District &lt;NA&gt;     All Students\n 6 0070011               Berlin School District      &lt;NA&gt;     All Students\n 7 0080011               Bethany School District     &lt;NA&gt;     All Students\n 8 0090011               Bethel School District      &lt;NA&gt;     All Students\n 9 0110011               Bloomfield School District  &lt;NA&gt;     All Students\n10 0120011               Bolton School District      &lt;NA&gt;     All Students\n# ℹ 187 more rows\n# ℹ 20 more variables: studentcount_current &lt;dbl&gt;, attrate_ytd &lt;dbl&gt;,\n#   studentcount_202021 &lt;dbl&gt;, attrate_202021 &lt;dbl&gt;, studentcount_201920 &lt;dbl&gt;,\n#   attrate_201920 &lt;dbl&gt;, reportingperiod &lt;dttm&gt;, date_update &lt;dttm&gt;,\n#   district_name &lt;chr&gt;, school_start_date &lt;dttm&gt;, grades_inperson_model &lt;chr&gt;,\n#   grades_hybrid_model &lt;chr&gt;, grades_remote_model &lt;chr&gt;,\n#   percent_students_fully_remote &lt;chr&gt;, total_number_students &lt;chr&gt;, …\n\n\nQuestion: How many rows are in the resulting table?\nAnswer: 197\n\n\nStep 2a: Left Join\n\nCopy your code above into the chunk below, and change it to a left join.\n\n\n# Paste the code below and adjust it\nct_school_attendance |&gt;\nleft_join( ct_school_learning_model, by= c(\"reportingdistrictcode\"=\"district_code\") )\n\n# A tibble: 200 × 24\n   reportingdistrictcode reportingdistrictname       category studentgroup\n   &lt;chr&gt;                 &lt;chr&gt;                       &lt;chr&gt;    &lt;chr&gt;       \n 1 0010011               Andover School District     &lt;NA&gt;     All Students\n 2 0020011               Ansonia School District     &lt;NA&gt;     All Students\n 3 0030011               Ashford School District     &lt;NA&gt;     All Students\n 4 0040011               Avon School District        &lt;NA&gt;     All Students\n 5 0050011               Barkhamsted School District &lt;NA&gt;     All Students\n 6 0070011               Berlin School District      &lt;NA&gt;     All Students\n 7 0080011               Bethany School District     &lt;NA&gt;     All Students\n 8 0090011               Bethel School District      &lt;NA&gt;     All Students\n 9 0110011               Bloomfield School District  &lt;NA&gt;     All Students\n10 0120011               Bolton School District      &lt;NA&gt;     All Students\n# ℹ 190 more rows\n# ℹ 20 more variables: studentcount_current &lt;dbl&gt;, attrate_ytd &lt;dbl&gt;,\n#   studentcount_202021 &lt;dbl&gt;, attrate_202021 &lt;dbl&gt;, studentcount_201920 &lt;dbl&gt;,\n#   attrate_201920 &lt;dbl&gt;, reportingperiod &lt;dttm&gt;, date_update &lt;dttm&gt;,\n#   district_name &lt;chr&gt;, school_start_date &lt;dttm&gt;, grades_inperson_model &lt;chr&gt;,\n#   grades_hybrid_model &lt;chr&gt;, grades_remote_model &lt;chr&gt;,\n#   percent_students_fully_remote &lt;chr&gt;, total_number_students &lt;chr&gt;, …\n\n\nQuestion: How many rows are in the resulting table?\nAnswer: 200\n\n\nStep 2b\n\nCopy the code above into the chunk below, and filter to the rows where percent_students_fully_remote is NA.\n\n\n# Paste the code below and adjust it\nct_school_attendance |&gt;\nleft_join( ct_school_learning_model, by= c(\"reportingdistrictcode\"=\"district_code\") ) |&gt;\n  filter(is.na(percent_students_fully_remote))\n\n# A tibble: 3 × 24\n  reportingdistrictcode reportingdistrictname              category studentgroup\n  &lt;chr&gt;                 &lt;chr&gt;                              &lt;chr&gt;    &lt;chr&gt;       \n1 2310018               Goodwin University Educational Se… &lt;NA&gt;     All Students\n2 3360015               Unified School District #1         &lt;NA&gt;     All Students\n3 3470015               Unified School District #2         &lt;NA&gt;     All Students\n# ℹ 20 more variables: studentcount_current &lt;dbl&gt;, attrate_ytd &lt;dbl&gt;,\n#   studentcount_202021 &lt;dbl&gt;, attrate_202021 &lt;dbl&gt;, studentcount_201920 &lt;dbl&gt;,\n#   attrate_201920 &lt;dbl&gt;, reportingperiod &lt;dttm&gt;, date_update &lt;dttm&gt;,\n#   district_name &lt;chr&gt;, school_start_date &lt;dttm&gt;, grades_inperson_model &lt;chr&gt;,\n#   grades_hybrid_model &lt;chr&gt;, grades_remote_model &lt;chr&gt;,\n#   percent_students_fully_remote &lt;chr&gt;, total_number_students &lt;chr&gt;,\n#   predominant_model &lt;lgl&gt;, organization_type &lt;chr&gt;, …\n\n\nQuestion: Why is there missing data in these rows?\nAnswer:\n\n\nStep 3a: Right Join\n\nCopy your code above into the chunk below, and change it to a right join.\n\n\n# Paste the code below and adjust it\nct_school_attendance |&gt;\nright_join( ct_school_learning_model, by= c(\"reportingdistrictcode\"=\"district_code\") ) |&gt;\n  filter(is.na(percent_students_fully_remote))\n\n# A tibble: 5 × 24\n  reportingdistrictcode reportingdistrictname category studentgroup\n  &lt;chr&gt;                 &lt;chr&gt;                 &lt;chr&gt;    &lt;chr&gt;       \n1 0646161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n2 0740161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n3 0950161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n4 1410161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n5 1550361               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n# ℹ 20 more variables: studentcount_current &lt;dbl&gt;, attrate_ytd &lt;dbl&gt;,\n#   studentcount_202021 &lt;dbl&gt;, attrate_202021 &lt;dbl&gt;, studentcount_201920 &lt;dbl&gt;,\n#   attrate_201920 &lt;dbl&gt;, reportingperiod &lt;dttm&gt;, date_update &lt;dttm&gt;,\n#   district_name &lt;chr&gt;, school_start_date &lt;dttm&gt;, grades_inperson_model &lt;chr&gt;,\n#   grades_hybrid_model &lt;chr&gt;, grades_remote_model &lt;chr&gt;,\n#   percent_students_fully_remote &lt;chr&gt;, total_number_students &lt;chr&gt;,\n#   predominant_model &lt;lgl&gt;, organization_type &lt;chr&gt;, …\n\n\nQuestion: How many rows are in the resulting table?\nAnswer: 5\n\n\nStep 3b\n\nCopy the code above into the chunk below, and filter to the rows where reportingdistrictname is NA.\n\n\n# Paste the code below and adjust it\nct_school_attendance |&gt;\nright_join( ct_school_learning_model, by= c(\"reportingdistrictcode\"=\"district_code\") ) |&gt;\n  filter(is.na(reportingdistrictname))\n\n# A tibble: 88 × 24\n   reportingdistrictcode reportingdistrictname category studentgroup\n   &lt;chr&gt;                 &lt;chr&gt;                 &lt;chr&gt;    &lt;chr&gt;       \n 1 0046821               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 2 0046921               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 3 0100161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 4 0170561               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 5 0170821               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 6 0190161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 7 0230121               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 8 0250161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n 9 0330161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n10 0360161               &lt;NA&gt;                  &lt;NA&gt;     &lt;NA&gt;        \n# ℹ 78 more rows\n# ℹ 20 more variables: studentcount_current &lt;dbl&gt;, attrate_ytd &lt;dbl&gt;,\n#   studentcount_202021 &lt;dbl&gt;, attrate_202021 &lt;dbl&gt;, studentcount_201920 &lt;dbl&gt;,\n#   attrate_201920 &lt;dbl&gt;, reportingperiod &lt;dttm&gt;, date_update &lt;dttm&gt;,\n#   district_name &lt;chr&gt;, school_start_date &lt;dttm&gt;, grades_inperson_model &lt;chr&gt;,\n#   grades_hybrid_model &lt;chr&gt;, grades_remote_model &lt;chr&gt;,\n#   percent_students_fully_remote &lt;chr&gt;, total_number_students &lt;chr&gt;, …\n\n\nQuestion: Why is there missing data in these rows?\nAnswer:\n\n\nStep 4a: Full Join\n\nCopy your code above into the chunk below, and change it to a full join.\n\n\n# Paste the code below and adjust it\n\nQuestion: How many rows are in the resulting table?\nAnswer:\n\n\nStep 4b\n\nCopy the code above into the chunk below, and filter to the rows where reportingdistrictname OR percent_students_fully_remote is NA.\n\n\n# Paste the code below and adjust it\n\nQuestion: Why is there missing data in these rows?\nAnswer:\n\n\nBonus! Is there a correlation between the percent of students fully remote in the first week of the 2020-2021 CT school year and the 2020-2021 attendance rate? Create a scatterplot to visualize this.\n\nHint: You are going to have to clean up the percent_students_fully_remote by converting asterisks to NA, removing the percentage sign, converting to integer, and dividing the number by 100.\n\n\n# Write your code below"
  },
  {
    "objectID": "course-materials/lectures/functions.html",
    "href": "course-materials/lectures/functions.html",
    "title": "Making Functions practice",
    "section": "",
    "text": "Functions\n\nInputs and outputs\nCan set defaults arguements\nCan be general or specific to a package.\n\nn() vs. read_all_contributions()\n\nSave time in the long run.\n\n\n\nFunction outline\n\nGreeting &lt;- function(arg1 = \"Hello\" ){\n  print(arg1)\n}\nGreeting()\n\n[1] \"Hello\"\n\nGreeting(\"Hiya\")\n\n[1] \"Hiya\"\n\n\n\n\nThis function will add\n\nadding &lt;- function(x,y){\n  \n  total &lt;- sum( c( x , y ))\n  \n  return(total)\n}\n\nadding(2,4)\n\n[1] 6\n\n#adding()\n\n\n\nThis function will multiply\n\nmultiplying &lt;- function(x = 1, y = 1){\n  total &lt;- x*y\n  return(total)\n}\n\nmultiplying()\n\n[1] 1\n\nmultiplying(2,4)\n\n[1] 8\n\n\n\n\nif, else if, else\nThe computer can run a logical check.\nConsider this function:\n\numbrella &lt;- function(weather = \"no precipitation\"){\n\nif(weather == \"no precipitation\"){\n  \n    print(\"leave umbrella at home\")\n    }\n    \nelse if(weather == \"snow\"){\n\n    print(\"You don't need an umbrella\")\n}\n  \nelse{\n    print(\"bring an umbrella\")\n    \n    }\n}\numbrella(weather = \"snow\")\n\n[1] \"You don't need an umbrella\"\n\n\n\n\nThis is a composite function\nDepending in an argument\n\nmy_1st_calculator &lt;-function(x,y,operation=\"add\"){\n  \n  if(operation %in% \"add\"){\n    total &lt;- adding(x,y)\n  }\n  \n  else if(operation %in% \"multiply\"){\n    total &lt;- multiplying(x,y)\n  }\n  \n  else{\n    stop(\"Please choose `add` or `multiply` for the operation argument\")\n  }\n  \n  return(total)\n}\n\n\nmy_1st_calculator(1,6, operation=\"multiply\")\n\n[1] 6\n\n\n\n\nNote on data masking\nNo masking : data$variable\nWith masking : data |&gt; filter(variable)\nData masking is super convenient for learning the tidyverse.\nNot so great when making functions.\nIf using a tidyverse verb with a variable use {{}} around the variable.\nRead more\n\n\nFiltering a lot\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nauto_filter &lt;- function(data, variable, value){\n  \n  data |&gt;\n    filter({{variable}} == {{value}})\n}\n\n\nauto_filter(data = mtcars, variable = am, value = 0 )\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\n\n\n\n\nClasswork"
  },
  {
    "objectID": "course-materials/labs/lab6/across.html",
    "href": "course-materials/labs/lab6/across.html",
    "title": "SDS192 Lab 6",
    "section": "",
    "text": "In this lab, we will study the financial relationships between medical drug and device companies and certain healthcare providers in MA using the Center for Medicare and Medicaid Service’s Open Payments Dataset. Specifically, we will determine which ten Massachusetts-based doctors received the most money from medical drug or device manufacturers in 2021. Then we will leverage our custom functions to produce a number of tables and plots documenting information about the payments made to each of these doctors. In doing so, we will update a similar analysis produced by ProPublica in 2018 called Dollars for Docs."
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-1-unique-values",
    "href": "course-materials/labs/lab6/across.html#ex-1-unique-values",
    "title": "SDS192 Lab 6",
    "section": "Ex 1: Unique Values",
    "text": "Ex 1: Unique Values\nI’ve written a function below called num_unique. The function calculates the length of unique values in the vector passed to the argument x.\nBelow, I’ve selected the two columns in open_payments_cleaned that we want to iterate this function over. Determine which map() function to use in order to return a numeric vector that indicates the length of unique values in each of these columns. If you’ve done everything correctly, you should get the output below.\n\nHint: You can refer to Lec 21 Slides Page 5-9 and its in-class exercise Ex2 to determine which map() function to use.\n\n\nnum_unique &lt;- function(x) {\n length(unique(x))\n}\n\nopen_payments_cleaned |&gt;\n  select(covered_recipient_npi, covered_recipient_full_name) |&gt;\n  map_int(num_unique) # Determine which map function to call here\n\n      covered_recipient_npi covered_recipient_full_name \n                      11837                       11858 \n\n\ncovered_recipient_npi covered_recipient_full_name 11837 11858\nNotice that there are still more full names than covered_recipient_npis, which means that certain doctors have multiple names in this dataset. Below I’ve written some code to calculate the number unique full names listed for each covered_recipient_npi and filter to the rows with more than one name. Can you identify some reasons why we might have multiple names listed for this same medical practitioner in this data frame?\n\nopen_payments_cleaned |&gt;\n  group_by(covered_recipient_npi) |&gt;\n  mutate(num_names = length(unique(covered_recipient_full_name))) |&gt;\n  ungroup() |&gt;\n  filter(num_names &gt; 1) |&gt;\n  select(covered_recipient_npi, covered_recipient_full_name) |&gt;\n  distinct() |&gt;\n  arrange(desc(covered_recipient_npi))\n\n# A tibble: 292 × 2\n   covered_recipient_npi covered_recipient_full_name\n                   &lt;dbl&gt; &lt;chr&gt;                      \n 1            1992991657 LANA SCHUMACHER            \n 2            1992991657 LANA BEAL                  \n 3            1992932453 JESSICA ALLEGRETTI         \n 4            1992932453 JESSICA RAVIKOFF           \n 5            1992712178 PASI ANTERO JANNE          \n 6            1992712178 PASI JANNE                 \n 7            1992187132 FAIZ BAYO-AWOYEMI          \n 8            1992187132 FAIZ BAYO AWOYEMI          \n 9            1982680740 DONALD MARKS               \n10            1982680740 DON MARKS                  \n# ℹ 282 more rows\n\n\nIt could be a doctor’s maiden name that they have since changed. It could also be a misspelling or hypocorism. Because of these issues, it is important that we use the covered_recipient_npi to identify doctors vs. the full name."
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-2-top-10-doctors",
    "href": "course-materials/labs/lab6/across.html#ex-2-top-10-doctors",
    "title": "SDS192 Lab 6",
    "section": "Ex 2: Top 10 Doctors",
    "text": "Ex 2: Top 10 Doctors\nWrite code to determine the 10 medical practitioners that received the most money from drug and device manufacturers in 2021, and store your results in top_10_doctors. Your final data frame should have 10 rows and columns for covered_recipient_npi and sum_total_payments.\n\nHint: This is about single table analysis. You can refer to Lec 15 slides and its in-class exercise.\n\n\n# Uncomment below and write data wrangling code\n\n#top_10_doctors &lt;- open_payments_cleaned |&gt;\n\nRight now the values that we will eventually want to iterate over in our analysis are stored as columns in a data frame. …but the family of purrr functions allows us to apply a function to each element of a vector or list. We want to create a series of vectors from these columns that we can iterate over. We will use the pull() function to do this."
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-3-top-10-doctors-ids",
    "href": "course-materials/labs/lab6/across.html#ex-3-top-10-doctors-ids",
    "title": "SDS192 Lab 6",
    "section": "Ex 3: Top 10 Doctors IDs",
    "text": "Ex 3: Top 10 Doctors IDs\nCreate a vector of top_10_doctors_ids from top_10_doctors, using the pull() function.\n\n# Uncomment and write code below to pull the top 10 doctor IDs into a vector\n\n# top_10_doctors_ids &lt;- top_10_doctors |&gt;\n\nWe also want a vector of doctor names associated with each of these IDs, but remember that there can be multiple names for a single doctor in this dataset. With this in mind, we are going to create a vector of the first listed name for a given covered_recipient_npi in the dataset. Taking the first listed name as the doctor’s name is an imperfect solution. The first listed name could be a misspelling. It could be a doctor’s maiden name that they have since changed. This is a temporary solution, and we would want to confirm that we have the correct name for each doctor before publishing any of these findings."
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-4-top-10-doctors-names",
    "href": "course-materials/labs/lab6/across.html#ex-4-top-10-doctors-names",
    "title": "SDS192 Lab 6",
    "section": "Ex 4: Top 10 Doctors Names",
    "text": "Ex 4: Top 10 Doctors Names\nCreate a vector containing the names of the doctors associated with the IDs in top_10_doctors_ids. First, define the function get_doctor_name. This function will:\n\nTake a doctor_id as an argument\nFilter open_payments_cleaned to that ID\nSummarize the first() covered_recipient_full_name listed for that ID\npull() the name value\n\n\nHint: You can refer to Lec 20 Slides Page 5-10 and Lec 20 in-class exercise Exercise 1-3 for all the functions that you’re going to write in this lab, meaning that you don’t need to use embracing for all the functions that you’re going to write in this lab.\n\nOnce this function has been defined, select the appropriate map() function to iterate top_10_doctors_ids through get_doctor_name and store the resulting character vector in top_10_doctors_names.\n\nget_doctor_name &lt;- function(doctor_id) {\n  # Write function code here\n}\n\n# Iterate the top_10_doctors_ids vector through get_doctor_name and store the results in a character vector\n\n# top_10_doctors_names &lt;- \n\nNow that we have the vectors we want to iterate over, we are ready to start defining our functions."
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-5-what-kind-of-payments-did-ma-based-doctors-receive-in-2021",
    "href": "course-materials/labs/lab6/across.html#ex-5-what-kind-of-payments-did-ma-based-doctors-receive-in-2021",
    "title": "SDS192 Lab 6",
    "section": "Ex 5: What Kind of Payments did MA-based Doctors Receive in 2021?",
    "text": "Ex 5: What Kind of Payments did MA-based Doctors Receive in 2021?\nTo get started, let’s define a function that filters open_payments_cleaned to a given doctor ID, and then calculates how much of each kind of payment has been paid to that doctor. Here is an example of what that data wrangling code would look like for a specific covered_recipient_npi:\n\nopen_payments_cleaned |&gt;\n  filter(covered_recipient_npi == 1194763482) |&gt;\n  group_by(nature_of_payment_or_transfer_of_value) |&gt;\n  summarize(num_payments = \n              sum(number_of_payments_included_in_total_amount),\n            total_payments = sum(total_amount_of_payment_usdollars))\n\n# A tibble: 2 × 3\n  nature_of_payment_or_transfer_of_value num_payments total_payments\n  &lt;chr&gt;                                         &lt;dbl&gt;          &lt;dbl&gt;\n1 Consulting Fee                                    4          5428.\n2 Royalty or License                                2      18750000 \n\n\n\nWrap the above code in a function named calculate_payment_type_amts. Rather than filtering to 1194763482, filter based on the value passed to an argument named doctor_id\nThen, use the map() function to apply calculate_payment_type_amts to each element in the top_10_doctors_ids vector. Running this code should return a list of 10 data frames\nFinally, pipe in set_names(top_10_doctors_names) to set the names for each data frame in the list to the doctor’s name\n\n\n# Write calculate_payment_type_amts function here\n\n# Iterate calculate_payment_type_amts over top_10_doctors_ids and set names to top_10_doctors_names"
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-6-when-were-payments-made-to-each-of-these-doctors-in-2021",
    "href": "course-materials/labs/lab6/across.html#ex-6-when-were-payments-made-to-each-of-these-doctors-in-2021",
    "title": "SDS192 Lab 6",
    "section": "Ex 6: When were Payments Made to Each of These Doctors in 2021?",
    "text": "Ex 6: When were Payments Made to Each of These Doctors in 2021?\nHere’s an example of a plot we could create to answer this question for one doctor.\n\nopen_payments_cleaned |&gt;\n    filter(covered_recipient_npi == 1194763482) |&gt;\n    ggplot(aes(x = day(date_of_payment), \n               y = \"\", \n               fill = total_amount_of_payment_usdollars)) +\n    geom_jitter(pch = 21, size = 2, color = \"black\") +\n    theme_minimal() +\n    labs(title = \"David Friedman\", \n         y = \"\", \n         x = \"Day\",\n         fill = \"Payment Amount\") +\n    scale_y_discrete(limits = rev) +\n    scale_fill_distiller(palette = \"BuPu\", direction = 1, labels = scales::comma) +\n    facet_wrap(~month(date_of_payment, label = TRUE), nrow = 4) \n\n\n\n\nWrite a function named payments_calendar. The function should:\n\nTake a doctor_id and doctor_name as arguments\nFilter open_payments_cleaned to the doctor’s ID\nCreate payment calendar plot modeled after the one above\nSet the title of the plot to the doctor’s name\n\nAfter you’ve written this function, use the map2() function to apply payments_calendar to each element in the top_10_doctors_ids vector and top_10_doctors_names vector.\n\n# Write payments_calendar function here\n\n# Iterate payments_calendar over top_10_doctors_ids and top_10_doctors_ids to create 10 plots"
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-7-which-manufacturers-paid-ma-based-doctors-in-2021-and-through-what-forms-of-payment",
    "href": "course-materials/labs/lab6/across.html#ex-7-which-manufacturers-paid-ma-based-doctors-in-2021-and-through-what-forms-of-payment",
    "title": "SDS192 Lab 6",
    "section": "Ex 7: Which Manufacturers Paid MA-based Doctors in 2021, and through What Forms of Payment?",
    "text": "Ex 7: Which Manufacturers Paid MA-based Doctors in 2021, and through What Forms of Payment?\nFinally, let’s define a function that filters open_payments_cleaned to a given doctor ID and determines how much the doctor received in compensation from different manufacturers, along with the forms of payment from each manufacturer. To do so, we will need to aggregate the data by covered_recipient_npi, applicable_manufacturer_or_applicable_gpo_making_payment_name, and form_of_payment_or_transfer_of_value and calculate the total payments associated with each grouping.\nWrite a function named calculate_manufacturer_payments. The function should:\n\nTake a doctor_id as an argument\nFilter open_payments_cleaned to that ID\nAggregate the filtered data by covered_recipient_npi, applicable_manufacturer_or_applicable_gpo_making_payment_name, and form_of_payment_or_transfer_of_value\nCalculate the total amount of payments for each grouping\nSort the resulting data frame in descending order by the total amount of payments\n\nAfter you’ve written this function, use the map_df() function to apply calculate_manufacturer_payments to each element in the top_10_doctors_ids vector. Note how this returns one data frame rather than a list of 10 data frames.\nPlot your resulting data frame as a column plot, attempting (to the best of your ability) to match the formatting of the plot below.\n\n# Write calculate_manufacturer_payments function here\n\n# Iterate calculate_manufacturer_payments over top_10_doctors_ids here\n\n# Plot resulting data frame here"
  },
  {
    "objectID": "course-materials/labs/lab6/across.html#ex-8-weekly-reflections",
    "href": "course-materials/labs/lab6/across.html#ex-8-weekly-reflections",
    "title": "SDS192 Lab 6",
    "section": "Ex 8: Weekly Reflections",
    "text": "Ex 8: Weekly Reflections\nFill out this week’s reflections Google form to receive credit."
  },
  {
    "objectID": "course-materials/in-class-activies/day_25solutions_function_writing.html",
    "href": "course-materials/in-class-activies/day_25solutions_function_writing.html",
    "title": "Lec 20: In-class Exercise: Write Functions",
    "section": "",
    "text": "We will use the babynames dataset and the congress_age dataset included in the fivethirtyeight package we used in Lab 4.\nThe babynames dataset contains for each year from 1880 to 2017 the number of children of each sex given each name (as recorded by the US Social Security Administration). All names with more than 5 uses are given.\nThe congress_age dataset contains the age of members of the United States congress over the years."
  },
  {
    "objectID": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-1",
    "href": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-1",
    "title": "Lec 20: In-class Exercise: Write Functions",
    "section": "Exercise 1",
    "text": "Exercise 1\nWrite a function called count_name that, when given a name (e.g.,Angelica, Ezekiel, or Riley) as an argument, returns the total number of births by year from the babynames data frame in the babynames package that match that name.\n\n# Write your code below\ncount_name &lt;- function(nombre = \"Nicholas\"){\n  if(is.element(nombre, babynames$name)) {\n    babynames |&gt;\n    filter(name ==  nombre ) |&gt;\n    group_by(name,year) |&gt;\n    reframe(year= year, n = sum(n)) \n      \n  }\n  else{\n    stop(\"Name not found\")\n  }\n}"
  },
  {
    "objectID": "course-materials/in-class-activies/day_25solutions_function_writing.html#bonus",
    "href": "course-materials/in-class-activies/day_25solutions_function_writing.html#bonus",
    "title": "Lec 20: In-class Exercise: Write Functions",
    "section": "Bonus!",
    "text": "Bonus!\nThe count_name function should return one row per year that matches (and generate an error message if there are no matches). Run the function once with the argument Ezekiel and once with Ezze.\n\n# Paste the code from Exercise 1 below and adjust it\ncount_name(\"Ezekiel\")\n\n# A tibble: 141 × 3\n   name     year     n\n   &lt;chr&gt;   &lt;dbl&gt; &lt;int&gt;\n 1 Ezekiel  1880    16\n 2 Ezekiel  1881    22\n 3 Ezekiel  1882    11\n 4 Ezekiel  1883    14\n 5 Ezekiel  1884    13\n 6 Ezekiel  1885    10\n 7 Ezekiel  1886    17\n 8 Ezekiel  1887    11\n 9 Ezekiel  1888    16\n10 Ezekiel  1889    14\n# ℹ 131 more rows\n\n#count_name(\"Ezze\")"
  },
  {
    "objectID": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-2",
    "href": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-2",
    "title": "Lec 20: In-class Exercise: Write Functions",
    "section": "Exercise 2",
    "text": "Exercise 2\nWrite a function called grab_name that, when given a name and a year as an argument, returns the rows from the babynames data frame in the babynames package that match that name for that year (and returns an error if that name and year combination does not match any rows). Run the function once with the arguments Ezekiel and 1883 and once with Ezze and 1883.\nChallenge: Add an else if after your if and before your else to catch an error if people choose a year less than 1880 (outside of the range of our data).\n\n# Write your code below\ngrab_name &lt;- function(nombre =\"Nicholas\",ano = 1984){\n\n  if(is.element(nombre,babynames$name))  {\n    babynames |&gt;\n    filter(name == nombre & year == ano) |&gt;\n    pull(name,year)\n  }\n  else if(ano &lt; 1880){\n    stop(\"Choose a year after 1880\")\n  }\n  else{\n    stop(\"Name and year not found\")\n  }\n}\ngrab_name()\n\n      1984       1984 \n\"Nicholas\" \"Nicholas\""
  },
  {
    "objectID": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-3",
    "href": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-3",
    "title": "Lec 20: In-class Exercise: Write Functions",
    "section": "Exercise 3",
    "text": "Exercise 3\nWrite a function called count_name_graph() that will use the function countname() to make a line graph that plots the year and the number of babies in a given year. The graph’s title should be “the”Babies Named (name of baby)” . The paste() function in r will help with your title, use it to put two strings together. Label your x and y axes.\n\n# Write your code below\ncount_name_graph &lt;- function(nombre = \"Nicholas\"){\n  count_name( nombre )|&gt;\n    ggplot(aes(x=year, y=n))+\n    geom_line()+\n    labs(title = paste(\"Babies named\", nombre))\n}\ncount_name_graph(\"Nicholas\")"
  },
  {
    "objectID": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-4",
    "href": "course-materials/in-class-activies/day_25solutions_function_writing.html#exercise-4",
    "title": "Lec 20: In-class Exercise: Write Functions",
    "section": "Exercise 4",
    "text": "Exercise 4\nWrite a function called summary_prop that will take a data frame as an argument, filter to a condition, and compute the proportion of that condition.\nRun the function with the arguments congress_age and age &gt;= 25 & age &lt;= 55 .\nYou can use your function on count_name(\"Ezekiel\"), n&gt;100. (Note: You probably used summarize() for the code for exercise 1, that sometimes returns grouped data. This code will work better if you add a pipe to an ungroup(). Alternatively you can just use reframe() instead of summarize()).\n\n# Write your code below\nsummary_prop &lt;- function(data, condition){\n  data |&gt; \n    filter( {{condition}} )|&gt;\n    summarise(\n      number_with_condition = n(),\n      prop_w_condition = number_with_condition/nrow(data)\n    )\n}\n  \nsummary_prop(data=congress_age, condition = age &gt;= 25 & age &lt;= 55)\n\n# A tibble: 1 × 2\n  number_with_condition prop_w_condition\n                  &lt;int&gt;            &lt;dbl&gt;\n1                 10657            0.572\n\nsummary_prop(data=count_name(), condition = n&gt;100)\n\n# A tibble: 1 × 2\n  number_with_condition prop_w_condition\n                  &lt;int&gt;            &lt;dbl&gt;\n1                   201            0.901"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#across-and-map",
    "href": "course-materials/lectures/Day_26_across_maps.html#across-and-map",
    "title": "iteration",
    "section": "across() and map()",
    "text": "across() and map()\nThese functions allow us to preform the same operation across multiple rows.\nmap() comes from the purr package.\nacross() comes from the dplyr package."
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#example-iris",
    "href": "course-materials/lectures/Day_26_across_maps.html#example-iris",
    "title": "iteration",
    "section": "Example: iris",
    "text": "Example: iris\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#average",
    "href": "course-materials/lectures/Day_26_across_maps.html#average",
    "title": "iteration",
    "section": "Average",
    "text": "Average\nLet’s find the average of each column that ends with .Length by species.\n\niris %>%\n  group_by(Species) %>%\n  summarise(\n    across(.cols = ends_with(\"Length\"), \n           .fns = list(mean = mean)))\n\n# A tibble: 3 × 3\n  Species    Sepal.Length_mean Petal.Length_mean\n  <fct>                  <dbl>             <dbl>\n1 setosa                  5.01              1.46\n2 versicolor              5.94              4.26\n3 virginica               6.59              5.55"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#rounding",
    "href": "course-materials/lectures/Day_26_across_maps.html#rounding",
    "title": "iteration",
    "section": "Rounding",
    "text": "Rounding\n\niris %>%\n  group_by(Species) %>%\n  reframe(across(\n    .cols = starts_with(\"Sepal\"), \n    .fns = ~ round(. , digits = 2)))\n\n# A tibble: 150 × 3\n   Species Sepal.Length Sepal.Width\n   <fct>          <dbl>       <dbl>\n 1 setosa           5.1         3.5\n 2 setosa           4.9         3  \n 3 setosa           4.7         3.2\n 4 setosa           4.6         3.1\n 5 setosa           5           3.6\n 6 setosa           5.4         3.9\n 7 setosa           4.6         3.4\n 8 setosa           5           3.4\n 9 setosa           4.4         2.9\n10 setosa           4.9         3.1\n# ℹ 140 more rows"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#rounding-1",
    "href": "course-materials/lectures/Day_26_across_maps.html#rounding-1",
    "title": "iteration",
    "section": "Rounding",
    "text": "Rounding\n\niris %>%\n  group_by(Species) %>%\n  reframe(across(\n    .cols = starts_with(\"Sepal\"), \n    .fns = ~ round(. , digits = 2)))\n\n# A tibble: 150 × 3\n   Species Sepal.Length Sepal.Width\n   <fct>          <dbl>       <dbl>\n 1 setosa           5.1         3.5\n 2 setosa           4.9         3  \n 3 setosa           4.7         3.2\n 4 setosa           4.6         3.1\n 5 setosa           5           3.6\n 6 setosa           5.4         3.9\n 7 setosa           4.6         3.4\n 8 setosa           5           3.4\n 9 setosa           4.4         2.9\n10 setosa           4.9         3.1\n# ℹ 140 more rows"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#map-is-similar-to-across",
    "href": "course-materials/lectures/Day_26_across_maps.html#map-is-similar-to-across",
    "title": "iteration",
    "section": "map() is similar to across()",
    "text": "map() is similar to across()\nIt performs some operation on a data frame, vector or list.\n\niris |>\n  map(.f = mean)\n\n$Sepal.Length\n[1] 5.843333\n\n$Sepal.Width\n[1] 3.057333\n\n$Petal.Length\n[1] 3.758\n\n$Petal.Width\n[1] 1.199333\n\n$Species\n[1] NA"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#different-maps",
    "href": "course-materials/lectures/Day_26_across_maps.html#different-maps",
    "title": "iteration",
    "section": "Different maps()",
    "text": "Different maps()\nmap() returns a list.\nmap_dfc() returns a dataframe with columns\nmap_dfr() returns a dataframe with rows."
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#map_dfc",
    "href": "course-materials/lectures/Day_26_across_maps.html#map_dfc",
    "title": "iteration",
    "section": "map_dfc()",
    "text": "map_dfc()\n\niris |>\n  map_dfc(.f = mean)\n\n# A tibble: 1 × 5\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n         <dbl>       <dbl>        <dbl>       <dbl>   <dbl>\n1         5.84        3.06         3.76        1.20      NA"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#rounding-with-across",
    "href": "course-materials/lectures/Day_26_across_maps.html#rounding-with-across",
    "title": "iteration",
    "section": "Rounding with across()",
    "text": "Rounding with across()\n\niris %>%\n  group_by(Species) %>%\n  summarise(across(\n    .cols = Sepal.Length:Petal.Width, \n    .fns = round))\n\n# A tibble: 150 × 5\n# Groups:   Species [3]\n   Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n   <fct>          <dbl>       <dbl>        <dbl>       <dbl>\n 1 setosa             5           4            1           0\n 2 setosa             5           3            1           0\n 3 setosa             5           3            1           0\n 4 setosa             5           3            2           0\n 5 setosa             5           4            1           0\n 6 setosa             5           4            2           0\n 7 setosa             5           3            1           0\n 8 setosa             5           3            2           0\n 9 setosa             4           3            1           0\n10 setosa             5           3            2           0\n# ℹ 140 more rows"
  },
  {
    "objectID": "course-materials/lectures/Day_26_across_maps.html#rounding-without-across",
    "href": "course-materials/lectures/Day_26_across_maps.html#rounding-without-across",
    "title": "iteration",
    "section": "Rounding without across()",
    "text": "Rounding without across()\n\niris %>%\n  group_by(Species) %>%\n  summarise(Sepal.Length = round(Sepal.Length),\n            Sepal.Width = round(Sepal.Width),\n            Petal.Length = round(Petal.Length),\n            Petal.Width = round(Petal.Width))\n\n# A tibble: 150 × 5\n# Groups:   Species [3]\n   Species Sepal.Length Sepal.Width Petal.Length Petal.Width\n   <fct>          <dbl>       <dbl>        <dbl>       <dbl>\n 1 setosa             5           4            1           0\n 2 setosa             5           3            1           0\n 3 setosa             5           3            1           0\n 4 setosa             5           3            2           0\n 5 setosa             5           4            1           0\n 6 setosa             5           4            2           0\n 7 setosa             5           3            1           0\n 8 setosa             5           3            2           0\n 9 setosa             4           3            1           0\n10 setosa             5           3            2           0\n# ℹ 140 more rows"
  },
  {
    "objectID": "readme.html",
    "href": "readme.html",
    "title": "SDS 192 Fall '23",
    "section": "",
    "text": "Source code to generate the course webpage for Smith College: Introduction to Data Science https://nics-github.github.io/SDS192/. Most of the content is in either:\n\n_quarto.yml: Set theme of webpage along with links in navigational bar.\nindex.qmd: A single Moodle-style page that lists all announcements and lectures notes in reverse-chronological order.\nPS.qmd: All problem sets/homeworks.\nprojects.qmd: Details on the mini-projects and term project.\nsyllabus.qmd: Course info/description, topics, materials, evaluation, and expectations.\n\n\n\nThis webpage is built/compiled using R Markdown Websites. To compile this webpage for yourself, do the following:\n\nGet the contents of this directory/repository:\n\nIf you are not familiar with GitHub, click the green “Clone or download” button on the top-right -> Download ZIP -> Unzip SDS192-master.zip.\nIf you are familiar with GitHub, clone this repository.\n\nDouble-click the SDS192.Rproj to open RStudio.\nIf you haven’t already, install the following R packages:\n\nrmarkdown and devtools\nAt the top of index.Rmd: all CRAN R packages listed .\nAt the top of index.Rmd: the emo and patchwork packages must be installed from GitHub using the devtools::install_github() function.\n\nGo to the “Build” pane of RStudio -> More -> Configure Build Tools… -> Ensure that “Project build tools” is set to “Webpage”.\nClick “Build Website”.\nThe website will display in the Viewer pane. The resulting index.html file and all other files for the webpage will be saved in the docs/ folder.\n\n\n\n\nTo publish/deploy this webpage and make it viewable on the web, you need to either:\n\nCopy the contents of the docs/ folder to your personal webpage or whatever domain hosting service you use.\nUse GitHub pages as I do. RStudio’s R Markdown Websites page gives instructions on how.\n\n\n\n\nThe format for this site was borrowed from Albert Kim’s SDS 192 course\nIf not created by me or referred to in some other way the activities and projects for this course are from:\n\nThe above mentioned website\nData Science in a box.\nBen Baumer’s SDS 192 course page"
  }
]