---
title: "lab-3-nytimes"
author: "Schwab"
editor: visual
---

In this lab we will use an API to grab top ten best sellers list from the new york times. [This is a nice intro to APIs](https://www.dataquest.io/blog/r-api-tutorial/) if you'd like to read it.  

Learning Goals:

1.  Get Familiar with APIs.
2.  Use some simple data to practice with ggplot.
3.  Make a final plot using skills we've learned in class so far. (You can use default colors until the last plot)

```{r}
library(tidyverse)
library(httr2) # This is used for working with apis
library(jsonlite) # This is for converting api data to readable text. 
```

# Step 1: Make a developer key for the New York times.

Go to [this website](https://developer.nytimes.com/get-started) follow the instructions to create an account and sign in.

After you sign in to your New York Times Developers account find the get started tab and click it (It'll bring you back to the get-started page above). Follow the instructions to Register an app for the Books API. (The first step may be confusing: click you username in the upper right corner and select apps). I labeled my app "lab 3". Enable permissions for the book API

After you've created an app go back to the [my-apps page](https://developer.nytimes.com/my-apps) and click on it to find the key. Paste your key below. Put quotes around it, it needs to be a string.

```{r}
#Add your key below
your_key <-'your-key-here'
```

# Step2: Make a call to an API

With an API we need to first prepare a GET request. This is a specially formatted url, that will reach out to the server at the New York Times. You can see how these are formatted for the best seller list [here](https://developer.nytimes.com/docs/books-product/1/overview). Most APIs are similar, but each is unique. No spaces are allowed in the url. Edit the words data and genre to get the hardcover fiction books from Feb 19, 2025. Look at the website for examples.

```{r}
#prepare the GET request for the hardcover-fiction genre from Feb 19, 2025
#only edit date and genre
prepare_request <- request(
  paste("https://api.nytimes.com/svc/books/v3/lists/2025-02-19/hardcover-fiction.json?api-key=",your_key, sep = "")
  )

# Take a look at the request, make sure there are no spaces and its formatted correctly
prepare_request
```

After we prepare the request we need to execute it. The httr2 package does this with req_perform(). Afterwards we have the data from the New York Times saved as get_data. If you want to take a look at the hexadecimal data you can with get_data$body.

```{r}
#|echo: false

get_data = req_perform(req = prepare_request)
#raw data
get_data$body
```

We don't want hexadecimal data. We want it to be readable by humans. Because we are human. rawToChar() takes hexadecimal data and changes it to characters which are in json format. The fromJSON() makes the data into a nice list.

```{r}
list_from_nyt = fromJSON(rawToChar(get_data$body)) 
best_sell_hardcover <- as.data.frame(list_from_nyt$results$books)
best_sell_hardcover
```

You don't need to remember everything above, but many scientist that work with data use APIs, so I wanted you to understand what's going on above. You will likely one day need to GET data from an API. Look up hexidecimal and json, if you are curious.

# New York Times books reviews

Each Wednesday the NYT puts out its best seller lists, each of which is 15 books long. You can see an example [here](https://www.nytimes.com/books/best-sellers/hardcover-fiction/). In fact that is the list that you got from the API and is now saved in clean_data. We can can ask the API for past book lists, or authors too, but we will not do that today. The data is fairly small and not challenging to understand, the rest of the focus will be on showing the data with different graphing techniques.

# Step 3: View the Data Using Two Approaches

View the artist data frame you have created.

```{r}
# Write your code below


```

```{r}
# Write your code below



```

# Step 4: Create a Histogram Visualizing the Distribution of the weeks_on_list variable

(1) Be sure to add labels to your plot.
(2) Set appropriate `binwidth` for bins. Don't use the default.
(3) Set the outline color for bins
(4) Follow the style guide

```{r}
# Write your code below 


```

**Discussion**: How do you interpret this plot? \> Interpreting histograms: (1) Peaks; (2) Spread; (3) Skewed data; (4) Outliers. To see the titles, fill by title in aes(). 

**Answer**:

# Step 5: Facet Your Previous Plot by publisher

Set `nrow` of your choice in the `facet_wrap` function.

```{r}
# Paste the code below and adjust it 

```

**Discussion**: What do the distributions indicate? What do you learn when comparing distributions across albums?

**Answer**:

# Step 6: Create a Dodged, or Filled Barplot for publishers

You will need to fill by author in aes(). Alter the position argument. 

Use the `coord_flip()` function to flip the x-axis and the y-axis. Also, be sure to add labels to your plot.

```{r}
# Write your code below

# This will rotate the publisher's names. 
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)
  )
```

# Step 7: Reorder the x-axis of Your Previous Plot

Copy the code from above and remove the position argument from geom_bar(), this will make your graph stacked as stacked is the default. Reorder your x-axis, by placing the `reorder()` function around the x aesthetic, and assign the following arguments:

-   the values to be reordered: `publisher`
-   the values will serve as the basis for reordering: `publisher`
-   and a function to determine how values will be reordered: `length`

```{r}
# Paste the code below and adjust it
#Hint: your answer should look like x = reorder()

  
```

**Discussion**: What do the counts indicate? What do you learn when comparing frequencies across publishers?

**Answer**:

# Step 8: Create Grouped Boxplots Visualizing the Distribution of `rank_last_week` by `author`

Use the `coord_flip()` function to flip the x-axis and the y-axis. Use `scale_y_reverse()` or `scale_x_reverse()` to make the vertical axis have smaller numbers on top. Be sure to add labels to your plot.

```{r}
# Write your code below


```

**Discussion**: What does the horizontal axis tell you? Consider the one boxplot that doesn't have zero length, what does that tell you about that author? Who are they?

**Answer**:

## Step 9: Make another API call for the author specifically. 



```{r}
# Edit the url to make a call for the specific author I've pasted your key below so no need to include that. 
authors_url = ""
  
prepare_request <- request(
  paste(authors_url,your_key, sep = "")
  )
get_data = req_perform(req = prepare_request)
author_from_nyt = fromJSON(rawToChar(get_data$body)) 
author <- as.data.frame(author_from_nyt$results) # Remove blank columns
author
```

**Question:** Your author object will be a dataframe with nothing in it, what could this mean?

**Answer:**

# Step 10: Reorder the x-axis of Your Previous Plot

Copy the graph from step 8. You can reorder by variables not present in the graph. reorder the graph in the following way

-   the values to be reordered: `publisher`
-   the values will serve as the basis for reordering: `weeks_on_list` (yours will be the song feature of your choice)
-   and a function to determine how values will be reordered: `median`

```{r}
# Paste the code below and adjust it

```

**Discussion**: How do you interpret this plot? What does is the relationship between the publishers now? How would you indicate this reordering on your plot?

**Answer**:


## Step 11: Make a final plot

In this last step make a final plot of your choosing, it can be a plot you made previously or something different. Clean it up, don't use default colors, add context and give good titles and labels. Cite your source. Final apply a theme with theme_*() to lose the gray background. 


