---
title: "Making Functions practice"
author: "Schwab"
format: 
  revealjs:
    theme: beige
editor: visual
execute: 
  echo: true
---

## Functions

-   Inputs and outputs

-   Can set defaults arguments

-   Can be general or specific to a package.

    -   `n()` vs. `read_all_contributions()`

-   Save time in the long run.

## Function outline

```{r}
Greeting <- function(arg1 = "Hello" ){
  print(arg1)
}
Greeting()
Greeting("Hiya")
```

## This function will add

```{r}

adding <- function(x,y){
  
  total <- sum( c( x , y ))
  
  return(total)
}

adding(2,4)
#adding()

```

## This function will multiply

```{r}
multiplying <- function(x = 1, y = 1){
  total <- x*y
  total
}

multiplying()
multiplying(2,4)

```

## Control Flow

If, else if , else

Make a [magic 8 ball.](https://magic-8ball.com)

```{r}
#Defining the function
magic_8_ball <- function(){

#Making a set of values to choose from
sample_set <- c(-1,0,1)  
  
#Randomly choosing a value
random_number <- sample(sample_set, size = 1)  
  
# Making a couple of vectors with 8 ball sayings
positive_vibes <- c("It is certain",
                    "It is decidedly so",
                    "Most likely",
                    "Signs point to yes")

neutral_vibes <- c("Reply hazy, try again",
                   "Ask again later",
                   "Concentrate and ask again")

negative_vibes <- c( "Don't count on it", 
                     "My reply is no", 
                     "Very doubtful")
# Control flow
if(random_number == 1){
    print(
      sample(positive_vibes, size = 1)
    )
    }
    
else if(random_number == 0){
    print(
      sample(neutral_vibes, size = 1)
    )
}
  
else{
    print(
      sample(negative_vibes, size = 1)
    )
    
    }
}

# Run the function
magic_8_ball()
```

## A composite function

Depending in an argument

```{r}
my_1st_calculator <-function(x,y,operation="add"){
  
  if(operation %in% "add"){
    total <- adding(x,y)
  }
  
  else if(operation %in% "multiply"){
    total <- multiplying(x,y)
  }
  
  else{
    stop("Please choose `add` or `multiply` for the operation argument")
  }
  
  return(total)
}
```

```{r}
my_1st_calculator(1,6, operation="multiply")
```

## R is vectorized

This means that R will do operations on vectors.

```{r}
vec1 <- c(1,2,3)
vec2 <- c(9,9,9)
vec1 + vec2
```

## Try one

Make a function that takes a vector of students in this class and prints the name of each student.

```{r}
#| warning: false

library(tidyverse)
library(googlesheets4)

class_info <- read_sheet("https://docs.google.com/spreadsheets/d/1k9qA7XldtHB8-FZjmEymoUoeZJArS4tGy5gyVsvyLB0/edit?usp=sharing") |>
  janitor::clean_names()

# selecting only the column we are interested in and making it into a vector.
name_vector <- as.vector( 
  class_info |>
    select("preferred_name"))

```

## Try these ones

1.  Make a function that takes a column of data and finds the average. Use it on the height variable by doing class_info\$height (hint: try it with sum() and length(), or for an easier approach use mean()) .

2.  Make a function that draws the US state that is input ( hint: use the maps library).

3.  Challenge: Make it so that the user can override the magic 8 ball function to always get a positive answer. (Hint: I did this by adding an override argument. )

<!-- ## Note on data masking -->

<!-- No masking : data\$variable -->

<!-- With masking : data \|\> filter(variable) -->

<!-- Data masking is super convenient for learning the tidyverse. -->

<!-- Not so great when making functions. -->

<!-- If using a tidyverse verb with a variable use `{{}}` around the variable. -->

<!-- [Read more](https://rlang.r-lib.org/reference/topic-data-mask.html) -->

<!-- ## Filtering a lot -->

<!-- ```{r} -->

<!-- library(tidyverse) -->

<!-- auto_filter <- function(data, variable, value){ -->

<!--   data |> -->

<!--     filter({{variable}} == value) -->

<!-- } -->

<!-- ``` -->

<!-- ```{r} -->

<!-- auto_filter(data = mtcars, variable = am, value = 0 ) -->

<!-- ``` -->

<!-- ## Classwork -->

<!-- ## Your turn -->

<!-- Make a function that outputs a scatterplot and linear regression -->

<!-- -   Call your function super grapher. -->

<!--     -   It should take an x and y variable. -->

<!--     -   It needs the data -->

<!--     -   It need a logical for the graph -->

<!-- ```{r} -->

<!-- #| echo: FALSE -->

<!-- library(tidyverse) -->

<!-- super_grapher <- function(variable1=NULL ,variable2=NULL , dat= NULL ,linear_regression = TRUE){ -->

<!--   ggplot(mapping = aes(x= {{variable1}},  y= {{variable2}}), data = dat)+ -->

<!--     geom_point() + -->

<!--     if(linear_regression == TRUE){ -->

<!--     geom_smooth(method = "lm" ) -->

<!--     } -->

<!--     else{ -->

<!--     labs(caption = "no regression required") -->

<!--     } -->

<!-- } -->

<!-- super_grapher(variable1 = mpg,variable2 = hp, dat = mtcars, linear_regression = FALSE) -->

<!-- ``` -->
