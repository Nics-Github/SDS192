---
title: "Github Practice"
author: "Schwab"
format: 
  revealjs: 
    theme: beige
editor: visual
---

We are going to practice collaborating on a file on github. 

# Part 1 FF merge

The next three steps will take you through the easiest type of merge called fastforward. 

## Step 1 Make a file.
Once you opened a project in RStudio make a new empty .qmd file with your name as the file name. (I would do `nic-schwab.qmd`) 

## Step 2 Push the file to github.
Commit, pull then push the file to github. You and your partner should both do this. 

## Step 3 Pull your partner's file from github. 
Pull again.  

## Complete. 
This should have worked well for both you and your partner. You should have both files on your local computer. 

# Part 2 a harder merge

Now we will engineer a merge conflict. 

## We just pushed to the main branch

Do not push to the main branch. 

## Do not push to `Main`

You can push to `main` when you are working alone (and always on one computer).

Directed Acyclic Graph (DAG) picture.

-   A node is a commit

-   Edges point to the parent

## Branches

When working with other people create branches.

If two people edit the same line of code and push to `main` Github doesn't know which to take and you get a merge conflict.

## Step 4: Create a new branch.

![](images/new_branch.png)

-   Give it a good name. No spaces.

-   Your partner should give a different branch name.

## Step 5: Change a small thing.

You and your partner should open the same `.qmd` file. 

Assuming the .qmd file is blank Go to line 10 in the source and add your favorite color.

## Step 6: Save and commit.

Your partner is doing the same thing.

Note: When you commit your branch gets a new node.

Directed Acyclic Graph (DAG) picture.

## Step 7: Pull then Push your branch to github.

In general it is a good idea to pull first to get any new changes before you push.

![](https://gcapes.github.io/swc-pr-tutorial/fig/push-pull.svg){width="600"}

## Step 8: Go to github.

You should see a banner that shows a pull request is being made. 

![](images/pull_request_note.png)

## Step 9: Create a pull request for your branch

You are pulling your files to the `main` branch.

One of you should go first while the other waits. 

Hopefully you'll be able to do an auto merge.

The second partner will have a merge conflict.

![](images/merge_pull_request.png)

Give your pull request a good message too.

## Step 10: Merge Branches

-   Do this one at a time.

-   You can delete the old branch.

    -   You'll make a new one.

## Step 11: Switch back to main and pull

![](images/switch_to_main.png){width="528"} 

Check your files are updated with both names.

## Merge Conflict practice

::: incremental
-   New Branch - Good Name

-   You and your partner should make different graphs around the same line.

-   Commit and push to github.

-   Go to github to fix the merge conflict.

-   Sometimes github will tell you go to the command line

    -   Open the Terminal and type what it says.
:::

## Sometimes a file changes.

head \>\>\>\>\>\>\>\>\>\>\>

make changes in your file and delete the excess.

\<\<\<\<\<\<\<\<\<\<\<

## Explore

-   history

-   branches

-   pull requests

## Practice again.

Always work in separate branches not on `main`.
