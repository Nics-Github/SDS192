---
title: "Real Github Practice"
author: "Schwab"
format: revealjs
editor: visual
---

# Pushing to `Main`

We've seen how messy this can get.

You can push to `main` when you are working alone (and always on one computer).

Directed Acyclic Graph (DAG) picture.

-   A node is a commit

-   Edges point to the parent

# Branches

When working with other people create branches.

Branches allow you to work without mucking up other's work.

If two people edit the same line of code at the same time and pushed to `main`?

Github doesn't know which to take and you get a tricky merge conflict.

# Step 1: Create a fresh project 1 .rproj file.

Don't delete your .qmd if you've been working on it.

We'll get to it later.

# Step 2: Create a new branch.

![](/docs/images/new_branch.png)

-   Give it a good name. No spaces.

-   Your partner should give a different branch name.

# Step 3: Change a small thing.

We will change the authors' names in our project.

Work out with your partner who is author 1 and 2 (and 3).

# Step 4: Save and commit.

Your partners are doing the same thing.

Note: When you commit your branch gets a new node.

Directed Acyclic Graph (DAG) picture.

# Step 5: Pull then Push your branch to github.

In general it is a good idea to pull first to get any new changes before you push.

![](https://gcapes.github.io/swc-pr-tutorial/fig/push-pull.svg){width="600"}

# Step 6: Go to github.

![You should see something like this. Except with your branch name instead of practice.](/images/pull_request_note.png)

# Step 7: Create a pull request for your branch

You are pulling your files to the `main` branch.

Both you and your partner will do this.

Hopefully you'll be able to do an auto merge.

![](/images/merge_pull_request.png)

Give your pull request a good message too.

# Step 8: Merge Branches

-   Do this one at a time.

-   You can delete the old branch.

    -   You'll make a new one.

# Step 9: Switch back to main and pull

![](/images/switch_to_main.png){width="528"}

Check your files are updated with both names.

# Merge Conflict practice

::: incremental
-   New Branch - Good Name

-   You and your partner should change the title of your project.

    -   Choose different titles

-   Commit and push to github.

-   Go to github to fix the merge conflict.

-   Sometimes github will tell you go to the command line

    -   Open the Terminal and type what it says.
:::

# Sometimes a file changes.

head \>\>\>\>\>\>\>\>\>\>\>

make changes in your file and delete the excess.

\<\<\<\<\<\<\<\<\<\<\<

# Explore

-   history

-   branches

-   pull requests

# Project work

Make a simple graph and push to github.

Always work in separate branches not on `main`.
