---
title: "Grammar of Graphics"
author: "Ben Baumer"
format: revealjs
editor: visual
output: html
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(fig.path = 'figures/', fig.height = 5)
```

# `ggplot2`

![](https://d21ii91i3y6o6h.cloudfront.net/gallery_images/from_proof/9296/small/1447173871/rstudio-hex-ggplot2-dot-psd.png)

## `ggplot2`

-   No one uses `ggplot1`

-   implementation of the *grammar of graphics*

-   [cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf)

\[https://ggplot2.tidyverse.org/\]

Let's example `ggplot()` and `geom_point()`. What attributes do they take?

## What is the "Grammar of Graphics"?

Big idea: independently specify plot building blocks and combine them to create just about any kind of graphical display you want

## Building blocks of data graphics

-   data (obvi.)
-   geometric objects (the literal stuff we draw)
    -   `geom_*()`
-   aesthetic mappings (how we draw that stuff)
    -   `aes()`
-   scales (range of values, colors, etc.)
    -   `scale_*()`
-   faceting (small multiples)
    -   `facet_wrap()`, `facet_grid()`

## Basic template

```{r gg-simple, message=FALSE, fig.height=5}
library(tidyverse)
ggplot(data = mtcars, aes(x = disp, y = mpg)) + 
  geom_point()
```

## More complicated

```{r gg-complex, message=FALSE}
ggplot(data = mtcars, aes(x = disp, y = mpg, color = factor(cyl))) + 
  geom_point() + 
  geom_line() + 
  facet_wrap(~am) + 
  scale_colour_brewer(palette = "Set1")
```

## Let's explore the history of our names

We'll use:

-   `data` = babynames with a `filter()`

-   `ggplot` piped to `geom_point()`

-   `aes(x=year, y=prop)`

# \[Live Coding Demo\]

-   How could we scale? `scale_*()`

-   What could we facet by? `facet_wrap()`, `facet_grid()`

-   I'll also use the \<- operator.
