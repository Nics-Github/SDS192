---
title: "maps-ggplot"
author: "Schwab"
format: html
editor: visual
---

```{r setup}
library(tidyverse)
library(mdsr)
library(sf)
library(ggspatial)
library(leaflet)
library(tidygeocoder)
library(mapproj)
library(maps)

```

Let's find the latitude and longitude for a couple of places.

```{r}

addresses<- tibble(address=c("Smith College", "2 Tyler Ct, Northampton, MA 01060", "Holyoke Community College")) |>
geocode(address, method="osm") |>
  mutate(name = c("Smith College","McConnell Hall","Holyoke Community College"))

addresses
```

Let's plot those with ggplot.

```{r}
ggplot(addresses) +
  geom_point(aes(long,lat)) 
  
  

```

Not very exciting. We'll add it it in a moment.

Let's build a map of Massachusetts with the map_data() function

```{r}
ma_counties <- map_data("county", "massachusetts") %>% 
  select( long, lat, group, id = subregion)

head(ma_counties)

```

Notice there are a lot of points for barnstable. Those are the vertices of a polygon. Let's draw the polygon with the points.

```{r}
ma_counties |> ggplot(aes(long,lat,group=group))+
  geom_polygon(fill = "white", colour = "grey50")+
  geom_point()  
  #coord_sf()
```

```{r}
ma_counties |> ggplot(aes(long,lat,group=group))+
  geom_polygon(fill = "white", colour = "grey50")+
  geom_point()+
  coord_sf()
```

Let's grab just Massachusetts cities from the data frame us.cities.

```{r}
ma_cities <- us.cities |>
  filter(country.etc =="MA") |>
  select(name, long, lat)

head(ma_cities)
```

Exercise: Plot MA cities onto our county map.

```{r}
ma_counties |> ggplot(aes(long,lat))+
  geom_polygon(fill = "white", colour = "grey50",aes(group=group)) +
  #geom_point(data=ma_cities,.......)
  
  #This is the default mapping. Think GPS
 coord_sf(default_crs= st_crs(4326) )
          
          
          # This is Mercator
          # st_crs(3857))
```

```{r}

```

Let's get some more accurate government data.

[Go here](https://www.census.gov/geographies/mapping-files/time-series/geo/cartographic-boundary.html) and download some shape files.

Saving them will be a bit of work. First we need to find those files.

```{r}
#| eval: FALSE
states <- read_sf("") |>
  sf::st_transform('+proj=longlat +datum=WGS84')

counties <- read_sf("") |>
  st_transform('+proj=longlat +datum=WGS84')
```

