{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"SQL\"\n",
        "subtitle: \"Classic Data Science\"\n",
        "format: html\n",
        "execute: \n",
        "  echo: true\n",
        "---\n",
        "\n",
        "# Setup\n",
        "\n",
        "# Big Idea\n",
        "\n",
        "Data can live in a flat file (.csv) or relational database.\n",
        "\n",
        "If the flat file is too big it wont fit into the computer's memory and the software may crash.\n",
        "\n",
        "Data is stored in a database on a server and called up on demand. \n",
        "\n",
        "To do this we use the Structured Query Language (SQL). \n",
        "\n",
        "# Different dialects of SQL\n",
        "\n",
        "We'll be using MySQL later in the course \n",
        "\n",
        "There are SQL, SQL Server, MySQL, PostgreSQL, Oracle, and others.\n",
        "\n",
        "# SQL is old\n",
        "\n",
        "IT was developed in the 1970s by IBM, but is still in use and important for data science \n",
        "\n",
        "[Here at the 2024 programming language rankings. ](https://spectrum.ieee.org/top-programming-languages-2024)\n",
        "\n",
        "# SQL-Practice\n",
        "\n",
        "We'll use this SQL practice to get started. \n",
        "\n",
        "https://www.sql-practice.com/\n",
        "\n",
        "# The Database db \n",
        "\n",
        "Here there are two small databases. \n",
        "\n",
        "hospitals\n",
        "northwind\n",
        "\n",
        "We'll focus on hospitals. \n",
        "\n",
        "# Tables or Data Frames\n",
        "\n",
        "There are four tables in hospitals. \n",
        "\n",
        "They are related, we can see the relationship using the schema. \n",
        "\n",
        "Most databases are relational.\n",
        "\n",
        "# Variable Types\n",
        "\n",
        "- Categorical\n",
        "  \n",
        "  - SQL: Text, CHAR\n",
        "\n",
        "\n",
        "- Numeric\n",
        "\n",
        "  - SQL: DATE, INT\n",
        "\n",
        "[There are more,](https://www.w3schools.com/sql/sql_datatypes.asp) but they all fall under Catergoical or Numeric.\n",
        "\n",
        "# SQL commands\n",
        "\n",
        "| SQL       | dplyr                           |\n",
        "|-----------|---------------------------------|\n",
        "| SELECT    | Choose a column...              |\n",
        "| FROM      | ...the data frame               |\n",
        "| WHERE     | A condition on a variable       |\n",
        "| GROUP BY  | Subset the data for computation |\n",
        "| HAVING    | A condition on grouped variables  |\n",
        "| ORDER BY  | Used to arrange the data (use DESC too) |\n",
        "| LIMIT     | Shows only the first so many rows |\n",
        "|COUNT  | Used with Select to count rows |\n",
        "|IS NULL | USed when searching for missing values|\n",
        "\n",
        "\n",
        "#  Example 1\n",
        "\n",
        "How many doctors are there?\n",
        "\n",
        "# Answer 1\n",
        "\n",
        "We can probably just count the data to answer this. \n",
        "\n",
        "But we can also do\n",
        "\n",
        "```{sql}\n",
        "#| eval: FALSE\n",
        "#| echo: TRUE\n",
        "\n",
        "SELECT COUNT(doctor_id)\n",
        "FROM doctors\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "# Example 2 \n",
        "\n",
        "How many cardiologists are there? What are their names?\n",
        "\n",
        "# Answer 2\n",
        "\n",
        "We can count them, but if there were lots of doctors at several hospitals this would be hard. \n",
        "\n",
        "\n",
        "```{sql}\n",
        "#| eval: FALSE\n",
        "#| echo: TRUE\n",
        "\n",
        "SELECT \n",
        "first_name, \n",
        "last_name\n",
        "FROM doctors\n",
        "WHERE specialty = \"Cardiologist\"\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "# Like and Wild cards\n",
        "\n",
        "You can use a combination of the command LIKE and a wild card % to answer the question above. \n",
        "\n",
        "\n",
        "```{sql}\n",
        "#| eval: FALSE\n",
        "#| echo: TRUE\n",
        "\n",
        "SELECT \n",
        "first_name, \n",
        "last_name\n",
        "FROM doctors\n",
        "WHERE specialty LIKE \"Card%\"\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "# Example 3 \n",
        "\n",
        "Who is the oldest patient?\n",
        "\n",
        "# Answer 3a\n",
        "\n",
        "Here we can order the data (or use the min function to find the earliest date). \n",
        "\n",
        "\n",
        "\n",
        "```{sql}\n",
        "#| eval: FALSE\n",
        "#| echo: TRUE\n",
        "\n",
        "SELECT \n",
        "birth_date, \n",
        "first_name, \n",
        "last_name\n",
        "FROM patients\n",
        "order by birth_date\n",
        "```\n",
        "\n",
        "\n",
        "# Answer 3b\n",
        "\n",
        "\n",
        "```{sql}\n",
        "#| eval: FALSE\n",
        "#| echo: TRUE\n",
        "\n",
        "\n",
        "SELECT \n",
        "min(birth_date), \n",
        "first_name, \n",
        "last_name\n",
        "FROM patients\n",
        "\n",
        "```\n",
        "\n",
        "\n",
        "# Practice\n",
        "\n",
        "There are some built in problems on this platform. \n",
        "\n",
        "Try questions 1 - 4\n",
        "\n",
        "![](./images/Questions_1_4_SQL_0.png)\n"
      ],
      "id": "dccaf4d5"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}