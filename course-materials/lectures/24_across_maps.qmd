---
title: "iteration"
author: "Schwab"
format: 
  revealjs:
    theme: beige

editor: visual
execute: 
  echo: true
---

## The for loop

In most computer programming languages you can write a for loop.

```{r}
iris |> 
  head(3)
```

```{r}
for (column in 1:4){
  print(mean(iris[[column]], na.rm = TRUE))
}
```

## R is a vectorized language

This means all objects are vectors.

```{r}
word <- "hi"
is.vector(word)
length(word)
two_words <- c(word , word)
is.vector(two_words)
is.vector(two_words[1])
```

We can take advantage of this without for loops.

We can use across() and map() do for loops on data frames.

## `across()` and `map()`

```{r}
#| include: false

library(tidyverse)
```

These functions allow us to preform the same operation across multiple rows.

`map()` comes from the `purr` package.

`across()` comes from the `dplyr` package.

## Example: `iris`

```{r}
head(iris)
```

## Average

Let's mimic the for loop above.

```{r}
iris %>%
  summarise(
    across(.cols = everything(), 
           .fns = mean))
```

## Again with group_by()

Let's find the average of each column that ends with `.Length` by species.

```{r}
iris %>%
  group_by(Species) %>%
  summarise(
    across(.cols = ends_with("Length"), 
           .fns = list(mean = mean)))
```

## Rounding with `across()`

```{r}
iris %>%
  group_by(Species) %>%
  summarise(across(
    .cols = Sepal.Length:Petal.Width, 
    .fns = round))
```

## Rounding without `across()`

```{r}
iris %>%
  group_by(Species) %>%
  summarise(Sepal.Length = round(Sepal.Length),
            Sepal.Width = round(Sepal.Width),
            Petal.Length = round(Petal.Length),
            Petal.Width = round(Petal.Width))
```

## Rounding

```{r}
iris %>%
  group_by(Species) %>%
  reframe(across(
    .cols = starts_with("Sepal"), 
    .fns = ~ round(. , digits = 2)))
```

## What .fns?

Any function with the appropriate data type can be used.

mean, median, sd, round

[Basically any of them,](https://www.datacamp.com/doc/r/functions) just drop the parenthesis.

## where()

We can drop the warning by specifying we only want the numeric variables.

```{r}
iris |>
  summarise(
    across(
      where(is.numeric), 
      .fns = mean
    )
  )
```

## `map()` is similar to `across()`

It performs some operation on a data frame, vector or list.

map() returns a list.

```{r}

iris |>
  map(.f = mean)
```

## Different maps()

`map()` returns a list.

`map_dfc()` returns a dataframe with columns

`map_dfr()` returns a dataframe with rows.

## `map_dfc()`

```{r}
iris |>
  map_dfc(.f = mean)
```
