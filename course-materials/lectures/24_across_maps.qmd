---
title: "iteration"
author: "Schwab"
format: 
  revealjs:
    theme: beige

editor: visual
execute: 
  echo: true
---

## The for loop

In most computer programming languages you can write a for loop.

In R we try not to do this (although we can).

## Ways to make a vector in R

::: incremental
-   `1:100` makes a vector of the number 1 through 100 in R.

-    `c("a","b")` makes a vector with "a" and "b" in it

-   `vector()` also makes a vector.

-   `df$column` makes a vector of a data frame column.
:::

Remember vectors are sets of values of the same type.

## Example for() loop

```{r}
#letters:  R has the alphabet built in. 

for (letter in letters){
  print(letter)
}

```

## Computing multiple powers.

Write a for loop that computes e\^1, e\^2,... e\^100 and prints them.

Or better yet stores them as a vector (this is a little harder).

Here's a start:

```{r}
e = 2.71828 # define e
vector_o_numbers <- vector(mode = "numeric", length = 100) #Making the loop fast by making an empty vector first.

# write for loop below. 
```

## Solution

```{r}
e = 2.71828
vector_o_numbers <- vector(mode = "numeric", length = 100) #Making the loop fast by making an empty vector first.

for(exponent in 1:100){
  print(e^exponent) # print the number
  vector_o_numbers[exponent] <- exp(exponent) # store the number
  # we don't need to return() in R, b/c the last line is always returned. 
}
```

## R is a vectorized language

This means most created objects are vectors.

Traditionally the word "hi" is a character variable or "string".

R makes it a vector with a string in it.

```{r}
word <- "hi"
is.vector(word)
length(word)
two_words <- c(word , word)
is.vector(two_words)
is.vector(two_words[1])
```

We can take advantage of this vectorized nature.

## Many functions are vectorized

This means they take a vector as an input and give a vector as an output.

```{r}
# Here I recompute the for loop with 100 powers of e in it. 
faster_vec_o_numbers <- exp(1:100)

```

## Checking the time

If you are interested you can check to see which is faster with system.time()

```{r}

print("With a for loop the time is:")
system.time(for(exponent in 1:100){vector_o_numbers[exponent] <- exp(exponent)})

print("Using vectorized operations the time is: ")
system.time( faster_vec_o_numbers <- exp(1:100))
```

## Some vectorized operations and functions

-   Basic Operations (+, -, \*, /, //, %/%)

-   Base R functions: `nchar()`, `is.na()` , `is.numeric()`

-   Comparison operators \>, \<, ==

## Make a vectorized function.

The conversion between Celsius and Fahrenheit is given by this formula: $$ F = C \times \frac{9}{5}+32$$

1.  Make a function that does this conversion.

2.  Use the function to compute all temps for C between 0 and 100.

## Solution

```{r}
C_to_F <-function(temperature_C){
  temperature_F = temperature_C * 9/5+32  
  #return(temperature_F)
}

celcius_temps <- C_to_F(0:100)

```

## Aggregating functions

These are functions that take a vector and give one output.

Examples: `mean()`, `sd()`, `median()`, `sum()`, `n()`

They are not vectorized functions.

## Vectorize exisiting functions

We can vectorize existing functions with helper functions in R

Two general what of doing this are `across()` and `map()`

## `across()` and `map()`

```{r}
library(tidyverse)
```

These functions allow us to preform the same operation across multiple rows.

`map()` comes from [the `purr` package.](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf)

-   many different map()s
    -   map_df() will be useful for us.
-   apply a function to every element

`across()` comes from [the `dplyr` package.](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-transformation.pdf)

-   this is a helper used with mutate and summarize
-   can also apply a function to every element.

## Example: `iris`

```{r}
head(iris)
```

<!-- ## A for loop -->

<!-- There are four columns in iris and I'd like to calculate the mean of each of them. -->

<!-- This feels bad. I'm using vectors in a four loop -->

<!-- ```{r} -->
<!-- library(tidyverse) -->
<!-- for (column in 1:4){ -->
<!--   print(mean(iris[[column]], na.rm = TRUE)) -->
<!-- } -->
<!-- ``` -->

## Average with across

There are four columns in iris and I'd like to calculate the mean of each of them.

```{r}
iris %>%
  summarise(
    across(.cols = is.numeric, 
           #.cols = everything()
           .fns = mean))
```

## Again with group_by()

Let's find the average of each column that ends with `.Length` by species.

```{r}
iris %>%
  group_by(Species) %>%
  summarise(
    across(.cols = ends_with("Length"), 
           .fns =  mean))
```

## Let's consider rounding

We'll look at 5 methods of rounding.

I'll also show you a couple of ways to select columns.

## Rounding with `across()`

Let's say we want to round every value.

```{r}
iris %>%
  group_by(Species) %>%
  summarise(
    across(
      .cols = Sepal.Length:Petal.Width, # R makes a vector of column names
      .fns = round)
    )
```

## Rounding without `across()`

and the tidyverse

```{r}
iris %>%
  group_by(Species) %>%
  mutate(
    Sepal.Length = round(Sepal.Length),
    Sepal.Width = round(Sepal.Width),
    Petal.Length = round(Petal.Length),
    Petal.Width = round(Petal.Width)
    )
```

## Rounding old school R

```{r}
# one at a time
iris$Sepal.Length <- round(iris$Sepal.Length)
iris$Sepal.Width <- round(iris$Sepal.Width)
iris$Petal.Length <- round(iris$Petal.Length)
iris$Petal.Width <- round(iris$Petal.Width)


```

## Rounding old school w/ vectors

Round all at the same time because round() is vectorized.

```{r}
iris <- round(iris[1:4])
```

## Rounding example 5

```{r}
rm(iris) # This removes the previous iris df that we made. 

iris %>%
  group_by(Species) %>%
  summarise(
    across( 
      .cols = starts_with("Sepal"), 
      .fns = ~ round(. , digits = 2))
    ) # The ~ introduces a custom round function the . references the data.  
```

## What .fns?

Any aggregating function with the appropriate data type can be used.

`mean`, `median`, `sd`, `round`

[Here's a nice list](https://www.datacamp.com/doc/r/functions) just drop the parenthesis.

## where()

We can drop the warning by specifying we only want the numeric variables.

```{r}
iris |>
  summarise(
    across(
      where(is.numeric), 
      .fns = mean
    )
  )
```

## `map()` for iteration.

It performs some operation on a data frame, vector or list.

map() returns a list.

map_df() returns a data frame.

```{r}
iris |>
  map_df(.f = mean)
```

## Different maps()

`map()` returns a list.

`map_dfc()` returns a dataframe with columns

`map_dfr()` returns a dataframe with rows.

## `map_dfc()`

```{r}
iris |>
  map_dfc(.f = mean)
```

## Conclusion

Try not to use a for loop unless you really need to.
