---
title: "Monarch Watch"
author: "Schwab"
format: html
editor: visual
---

```{r}
#install.packages("googlesheets4")
library(googlesheets4)
library(tidyverse)
library(janitor)
library(tidygeocoder)
library(sf)
library(leaflet)
```

Every year Monarch Butterflies fly south for the winter. They start in higher latitudes and migrate south to their wintering areas in Mexico.

[Monarch Watch](https://monarchwatch.org/blog/) is a citizen science initiative housed in the University of Kansas. Each year volunteers tag these butterflies and release them so their progress in their southern migration can be mapped. If someone finds a monarch with a tag they [can report it.](https://docs.google.com/forms/d/e/1FAIpQLSetTI4HYcyb1GfIyo-U5rAuVVezvOrwicz2ztIt244Vh7S4VA/viewform)

## Import and Clean Data

The reporting data is available online in the form of google sheets. It can be brought into R with the `googlesheets4` R package. Pay attention to your console, google needs permission to download.

```{r}
US_CAN_Recovery_2022 <- read_sheet("https://docs.google.com/spreadsheets/d/14ONbP-0rgvVz-DR0MWYkkPm0BzyFBHMiNCA2F5I8Yks/edit#gid=1710298744")

Pre_2023_Mexico_Recovery <- read_sheet("https://docs.google.com/spreadsheets/d/1UdJfooBJrm0Y1zlpwIhGz7ToZfP9h8OeucJbXrWwZEY/edit#gid=1853245517")

# The code below takes both of these dataframes and makes them into a list. 

data_frame_list <- list(US_CAN_Recovery_2022, Pre_2023_Mexico_Recovery)
```

There is an R object called a list. A list can store different types of objects like data frames, vectors, character values, etc.

List can be handy for storing and retrieving data. We will make a list called `butterfly_dataframes` and use it to do some data analysis.

```{r}
# We need to clean the data we downloaded from google sheets. We can use clean_names() to do this. Since there are two dataframes we can clean them both at once. Use map() to do so. 

# Iterate over your function to clean the names and store the three dataframes as a list. 
butterfly_dataframes <- map(
  .x = data_frame_list,
  .f = clean_names
)

# At the moment butterfly_dataframes is unnamed which is inconvient so below I'm naming all the dataframes in the list.  

names(butterfly_dataframes) <-   c( "US_CAN_Recovery_2022", "Pre_2023_Mexico_Recovery")
```

Now work with the list \`butterfly_dataframes\`

```{r}
# glimpse just one of the dataframes with $

view(butterfly_dataframes$US_CAN_Recovery_2022)
```

## Plot the path of a butterfly

Imagine being able to follow the path of one butterfly from north to south. Let's follow the path of the top 7 butterflies.

Find the top 7 most spotted butterflies from 2022.

```{r}
top_7_most_spotted_2022 <- butterfly_dataframes$US_CAN_Recovery_2022  |>
  count(tag_code) |>
  arrange(desc(n)) |>
  slice_head(n=7) |>
  pull(tag_code)
  

```

Now we need the location data for the top 7 butterflies. You can do this with a `filter()`, piped into `select()` to get the location of the city and state and finally pipe that information into `geocode()`. It takes `geocode()` sometime to produce lat and long data. Make sure your filtering works as expected before using `geocode()`. We are getting the lat and long on the city level.

```{r}
top_7_butterfly <- butterfly_dataframes$US_CAN_Recovery_2022 |>
  filter(tag_code %in% top_7_most_spotted_2022) |>
  select(tag_code,city_location,state_province) |>
  geocode(city = city_location, state= state_province)
```

We need a map of the Canada, Mexico and the US together. We can get them from the maps package then create simple features with them.

```{r}
# Make a US state map.

USA_map <-  maps::map("state", plot = FALSE, fill = TRUE) |> st_as_sf(coords = c("x", "y"), crs = 4326)

```

Plot the map.

```{r}
ggplot()+
  geom_sf(data = USA_map) +
  theme_minimal() 
```

In the code chunk below add your top 7 butterflies, be sure to jitter them and color them orange.

```{r}
USA_map|>
  ggplot()+
  geom_sf() +
  geom_jitter(data = top_7_butterfly,
           aes(x= long ,y= lat) , size = 2, color="orange")+
  theme_bw() 
```

This is not an exciting map, I only see 7ish dots, not seven beautiful migrations south. This is showing the limitation of citizen science.

## Make a Chrolopleth map of the US and Canada.

Well let's see what we can learn when we plot all of the butterflies from 2022 at the same time. Let's code it by the state level, as opposed to the city level to save time. Getting location at the state level will take `geocode()` 43 seconds instead of 8 minutes so you can start working on the next part while you wait. The draw back is that if we plot these as points they will all be in the center of states.

```{r}
 butterfly_location_data <- butterfly_dataframes$US_CAN_Recovery_2022 |>
   select(tag_code,city_location,state_province,country, date)|>
   geocode(state = state_province, country = country)


```

We would expect locations in the US with more people to have more sightings. So instead of plotting the overal sighting we'll make a Chloropleth map that colors the sightings by state as a percentage of the total sightings.

We have to wrangle the data a bit. Make a df called `butterfly_location_summary` by finding the following:

-   The total number of sightings per state
-   The total number of sightings in 2022
-   The proportion for each state

Then we need to join our data frame with `USA_map` to get the location data. I made a `states` df that has the states names and abbreviations in it.

-    join the states df to the butter_location_summary

-   join the new df made above to USA_map, besure to have US map on the left so you don't lose simple features.

```{r}
# Wrangle your data
butterfly_location_summary <- butterfly_location_data |>
   group_by(state_province) |>
   summarise(
          count_of_sightings = n(),
          total = nrow(x=butterfly_location_data),
          prop = count_of_sightings/total)


# Here is a df with state abreviation and names
states<- as.data.frame(cbind(abrev = state.abb, lower_state = tolower(state.name), upper_state = state.name))

butterfly_location_data_summary <- inner_join(states, butterfly_location_summary, by = c("abrev" = "state_province"))

# Inner join to get the location data.


USA_map_joined <- USA_map |>
  inner_join(butterfly_location_data_summary, by = c("ID"="lower_state")) 

```

Great! Let's make our map. Also pick the "YlOrRd" color palette, the default one doesn't conjure up images of Monarchs.

```{r}

USA_map_joined|>
  ggplot()+
  geom_sf(aes(fill=prop)) +
  
  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. 
  
  scale_fill_distiller(palette = "YlOrRd", direction = 1) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "azure2",
                                colour = "black",
                                size = 0.5),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank())
  

```

The above map doesn't normalize for the population of each state. Notice that Texas, NY, NJ,Virginia, and Ohio are darker because more people live there. So they are more likely to see butterflies. To illustrate this run the chunk below of the total number of observations to see that the map is the same.

```{r}
USA_map_joined|>
  ggplot()+
  geom_sf(aes(fill=count_of_sightings)) +
  
  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. 
  
  scale_fill_distiller(palette = "YlOrRd", direction = 1) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "azure2",
                                colour = "black",
                                size = 0.5),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank())
  
```

I'd like a map that shows the proportion of sightings based on the population of each state. Use `get_acs()` from tidycensus to get the state population for the states (choose geography ="state"). Then join with the USA_map_joined to make a normalized proportion by state population.

This is an interesting map, give it a descriptive title and a caption stating where the data came from remove the latitude and longitude by setting axis.text = element_blank() in theme (see notes from previous classes).

```{r}
US_pop <- 
  tidycensus::get_acs(
    geography = "state", 
    variables = c(population = "B01003_001"), 
    geometry = FALSE
  ) |>
  mutate(NAME = tolower(NAME))

US_tot_pop <- inner_join(USA_map_joined, US_pop, by = c("ID"="NAME"))|>
  mutate(new_prop = count_of_sightings/estimate)

US_tot_pop|>
  ggplot()+
  geom_sf(aes(fill=new_prop)) +
  
  # The code below set a color palette and changes the background color. Orange colors for butterflys and light blue for the background the make the points pop. I also turned off the grid lines. 
  
  scale_fill_distiller(palette = "YlOrRd", direction = 1) +
  theme_minimal() +
  theme(
    panel.background = element_rect(fill = "azure2",
                                colour = "black",
                                size = 0.5),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    axis.text = element_blank())+
  labs(
    title = "Monarch sightings by population",
    caption = "data: American Community Survey 2017-2022 \\ Monarch Watch "
  )
  
```

**Question: What does the above map show?**

## An Interactive Map

We'll use leaflet to make a map showing the location of all of the sightings in 2022.

Finally these butterflys end up in Mexico for the winter. Using Pre_2023_Mexico_Recovery data

-   filter for 2022 data

-   add a column that is called Mexico and is a list of the word "Mexico"

-   count the number of sightings in each location.

-   Then geocode by state and country.

```{r}
Mexico_locations <- butterfly_dataframes$Pre_2023_Mexico_Recovery |>
  filter(report_season == 2022)|>
  group_by(location)|>
  mutate(Mexico = "Mexico",
         count = n()) |>
  ungroup()|>
  geocode(state = location, country = Mexico)



```

Finally make a point plot to show the location of all the sightings of these butterflies in the US and Mexico. (Hint: You need to make a map of mexico with the maps::map() function). Also this will look better if you take the 8 minutes to geocode by location.

```{r}
#If you choose to do this I recommend you save the data then load it as necessary. After saving the data comment the code below. If you want to use the geocoding my state, that's fine too. 

# butterfly_location_data_8min <- butterfly_dataframes$US_CAN_Recovery_2022 |>
#    select(tag_code,city_location,state_province,country, date)|>
#    geocode(city = city_location, state = state_province, country = country)

#save(butterfly_location_data_8min, file = "butterfly_location_data_8min.Rdata")
# 
load("butterfly_location_data_8min.Rdata")
```

```{r}
Mexico_map <-  maps::map(region = "Mexico", plot = FALSE, fill = TRUE) |> st_as_sf(coords = c("x", "y"), crs = 4326)

```

```{r}
butterfly_icon <- makeIcon(
  iconUrl = "monarch-butterfly.png",
  iconWidth = 9.6, iconHeight = 9.6,
  iconAnchorX = 0, iconAnchorY = 0)
```

Add two sets for markers one for the individual sightings in `butterfly_location_data` and one for the Mexico locations, use the big icons for the wintering homes. You don't need to reference long and lat, leaflet will figure those out.

```{r leaflet}
leaflet() |>
  addTiles() |>
  addMarkers(data= butterfly_location_data_8min, 
             lat = ~lat,
             lng = ~long,
             icon = butterfly_icon
             #clusterOptions = markerClusterOptions()
             )|>
  addCircleMarkers(data = Mexico_locations,
                   #radius= ~count/10,
                   popup = ~as.character(count))
    
  
```

This map gives an interesting picture of where this type of citizen science is actually happening. We'll play with leaflet more on Monday. 



